/**
 * Event Handler Module for Vulnerability Scanner
 * Handles all event binding and event management
 */
export class VulnerabilityScannerEventHandler {
    constructor(uiRenderer, scannerLogic, dataManager, tabManager, notificationManager) {
        this.uiRenderer = uiRenderer;
        this.scannerLogic = scannerLogic;
        this.dataManager = dataManager;
        this.tabManager = tabManager;
        this.notificationManager = notificationManager;
    }

    bindEvents() {
        this.bindScanTypeEvents();
        this.bindTargetEvents();
        this.bindScanControlEvents();
        this.bindTabEvents();
    }

    bindScanTypeEvents() {
        // Scan type change handler
        this.uiRenderer.elements.scanTypeSelect.addEventListener('change', (e) => {
            if (e.target.value === 'custom') {
                this.uiRenderer.elements.customScanOptions.classList.remove('hidden');
            } else {
                this.uiRenderer.elements.customScanOptions.classList.add('hidden');
            }
        });
    }

    bindTargetEvents() {
        // Add target button
        this.uiRenderer.elements.addTargetBtn.addEventListener('click', () => {
            this.handleAddTarget();
        });

        // Target selection change
        this.uiRenderer.elements.targetSelect.addEventListener('change', (e) => {
            if (e.target.value) {
                this.handleTargetSelection(e.target.value);
            }
        });

        // Allow adding target with Enter key
        this.uiRenderer.elements.targetUrlInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.handleAddTarget();
            }
        });
    }

    bindScanControlEvents() {
        // Toggle scan button
        this.uiRenderer.elements.scanToggleBtn.addEventListener('click', () => {
            if (this.scannerLogic.isScanning) {
                this.scannerLogic.stopScan();
            } else {
                this.scannerLogic.startScan();
            }
        });

        // Export results button
        this.uiRenderer.elements.exportResultsBtn.addEventListener('click', () => {
            this.scannerLogic.exportResults();
        });

        // Report generation buttons
        this.uiRenderer.elements.generateHTMLReportBtn.addEventListener('click', () => {
            this.handleReportGeneration('html');
        });

        this.uiRenderer.elements.generateCSVReportBtn.addEventListener('click', () => {
            this.handleReportGeneration('csv');
        });

        this.uiRenderer.elements.generateAllReportsBtn.addEventListener('click', () => {
            this.handleGenerateAllReports();
        });

        this.uiRenderer.elements.integrateNmapBtn.addEventListener('click', () => {
            this.handleNmapIntegration();
        });
    }

    /**
     * Handle report generation for specific format
     */
    handleReportGeneration(format) {
        // Get reference to the vulnerability scanner app
        const app = this.getVulnerabilityApp();
        if (app) {
            app.generateVulnerabilityReport(format);
        } else {
            this.notificationManager.show('Report generation not available', 'error');
        }
    }

    /**
     * Handle generation of all report formats
     */
    handleGenerateAllReports() {
        const app = this.getVulnerabilityApp();
        if (app) {
            app.generateAllReports();
        } else {
            this.notificationManager.show('Report generation not available', 'error');
        }
    }

    /**
     * Handle nmap integration
     */
    handleNmapIntegration() {
        // Show modal or prompt for nmap data input
        this.showNmapIntegrationDialog();
    }

    /**
     * Get reference to vulnerability scanner app
     */
    getVulnerabilityApp() {
        // Find the app instance through the container element
        const container = this.uiRenderer.elements.targetSelect?.closest('#vulnerability-scanner-container');
        if (container && container._vulnerabilityApp) {
            return container._vulnerabilityApp;
        }
        
        // Fallback: try to find through window management
        if (window.windowManager && window.windowManager.windows) {
            const vulnWindow = window.windowManager.windows.find(w => w.type === 'vulnerability-scanner');
            return vulnWindow;
        }
        
        return null;
    }

    /**
     * Show nmap integration dialog
     */
    showNmapIntegrationDialog() {
        const dialog = document.createElement('div');
        dialog.className = 'fixed inset-0 bg-black/50 flex items-center justify-center z-50';
        dialog.innerHTML = `
            <div class="bg-gray-800 p-6 rounded-lg max-w-md w-full mx-4">
                <h3 class="text-lg font-semibold text-white mb-4">Integrate Nmap Data</h3>
                <p class="text-gray-300 mb-4">Paste nmap command output or run nmap scan in terminal first, then click integrate to include network scan data in vulnerability reports.</p>
                
                <textarea 
                    id="nmapDataInput" 
                    placeholder="Paste nmap output here..."
                    class="w-full h-32 bg-gray-700 text-white p-3 rounded border border-gray-600 focus:border-blue-500 focus:outline-none resize-none"
                ></textarea>
                
                <div class="flex justify-end space-x-3 mt-4">
                    <button id="cancelNmapDialog" class="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded transition-colors">
                        Cancel
                    </button>
                    <button id="integrateNmapData" class="px-4 py-2 bg-blue-600 hover:bg-blue-500 text-white rounded transition-colors">
                        Integrate Data
                    </button>
                </div>
                
                <div class="mt-3 text-xs text-gray-400">
                    <p><strong>Tip:</strong> Use nmap with vulnerability scripts like:</p>
                    <code class="bg-gray-700 px-2 py-1 rounded">nmap --script=vuln target.com</code>
                </div>
            </div>
        `;

        document.body.appendChild(dialog);

        // Handle dialog events
        const cancelBtn = dialog.querySelector('#cancelNmapDialog');
        const integrateBtn = dialog.querySelector('#integrateNmapData');
        const input = dialog.querySelector('#nmapDataInput');

        cancelBtn.addEventListener('click', () => {
            document.body.removeChild(dialog);
        });

        integrateBtn.addEventListener('click', () => {
            const nmapData = input.value.trim();
            if (nmapData) {
                const app = this.getVulnerabilityApp();
                if (app) {
                    app.integrateNmapResults(nmapData);
                } else {
                    this.notificationManager.show('Integration failed: App not found', 'error');
                }
                document.body.removeChild(dialog);
            } else {
                this.notificationManager.show('Please enter nmap data to integrate', 'warning');
            }
        });

        // Close on escape key
        const handleEscape = (e) => {
            if (e.key === 'Escape') {
                document.body.removeChild(dialog);
                document.removeEventListener('keydown', handleEscape);
            }
        };
        document.addEventListener('keydown', handleEscape);

        // Focus the textarea
        input.focus();
    }

    bindTabEvents() {
        // Delegate tab events to tab manager
        this.tabManager.bindTabEvents();
    }

    handleAddTarget() {
        const url = this.uiRenderer.elements.targetUrlInput.value.trim();
        if (!url) {
            this.notificationManager.show('Please enter a target URL', 'error');
            return;
        }

        // Basic URL validation
        try {
            new URL(url);
        } catch {
            this.notificationManager.show('Please enter a valid URL', 'error');
            return;
        }

        // Extract domain for name
        const domain = new URL(url).hostname;
        const targetData = {
            id: `custom-${Date.now()}`,
            name: `Custom Target - ${domain}`,
            url: url,
            description: `Custom target added by user`,
            type: 'web_application',
            technology: 'Unknown',
            criticality: 'Medium',
            status: 'Active',
            lastScanned: null,
            vulnerabilities: [],
            endpoints: ['/'],
            forms: []
        };

        const success = this.dataManager.addTarget(targetData);
        if (success) {
            this.dataManager.populateTargetList();
            this.dataManager.updateStatistics();
            this.uiRenderer.elements.targetUrlInput.value = '';
            this.notificationManager.show(`Target ${domain} added successfully`, 'success');
        } else {
            this.notificationManager.show('Failed to add target', 'error');
        }
    }

    handleTargetSelection(targetId) {
        const target = this.dataManager.selectTarget(targetId);
        if (target) {
            this.notificationManager.show(`Selected target: ${target.name}`, 'info');
        } else {
            this.notificationManager.show('Target not found', 'error');
        }
    }

    // Keyboard shortcuts
    bindKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // Only handle shortcuts when the scanner is focused
            if (!this.isInFocus()) return;

            // Ctrl+Enter to start/stop scan
            if (e.ctrlKey && e.key === 'Enter') {
                e.preventDefault();
                if (this.scannerLogic.isScanning) {
                    this.scannerLogic.stopScan();
                } else {
                    this.scannerLogic.startScan();
                }
            }

            // Ctrl+E to export results
            if (e.ctrlKey && e.key === 'e') {
                e.preventDefault();
                this.scannerLogic.exportResults();
            }

            // Ctrl+R to generate HTML report
            if (e.ctrlKey && e.key === 'r') {
                e.preventDefault();
                this.handleReportGeneration('html');
            }

            // Ctrl+Shift+R to generate all reports
            if (e.ctrlKey && e.shiftKey && e.key === 'R') {
                e.preventDefault();
                this.handleGenerateAllReports();
            }

            // Ctrl+N to open nmap integration
            if (e.ctrlKey && e.key === 'n') {
                e.preventDefault();
                this.handleNmapIntegration();
            }

            // Ctrl+C to generate CSV report
            if (e.ctrlKey && e.key === 'c') {
                e.preventDefault();
                this.handleReportGeneration('csv');
            }

            // Tab navigation (1-4 keys)
            if (e.key >= '1' && e.key <= '4') {
                e.preventDefault();
                const tabMap = {
                    '1': 'vulnerabilities',
                    '2': 'requests',
                    '3': 'evidence',
                    '4': 'targets'
                };
                this.tabManager.switchToTab(tabMap[e.key]);
            }
        });
    }

    isInFocus() {
        // Check if the vulnerability scanner container or any of its children have focus
        const container = document.querySelector('#vulnerability-scanner-container');
        return container && (container.contains(document.activeElement) || document.activeElement === container);
    }

    // Cleanup event listeners
    destroy() {
        // Remove any global event listeners if needed
        // Currently no global listeners to remove as they're all bound to elements
    }
}
