/**
 * Web Target Registry Refactoring Test
 * Simple test to verify the refactored target system works correctly
 */

import { webTargetRegistry } from '../web-target-registry.js';
import { 
    getAllMunicipalityVotingTargets, 
    getMunicipalityVotingTargetById,
    municipalityVotingGroup 
} from './municipality-voting/index.js';

/**
 * Test the refactored target system
 * Run this in the browser console to verify everything works
 */
export async function testRefactoredTargetSystem() {
    console.log('🧪 Testing Refactored Web Target System...\n');

    try {
        // Test 1: Registry initialization
        console.log('1️⃣ Testing registry initialization...');
        await webTargetRegistry.initializeTargets();
        const allTargets = webTargetRegistry.getAllTargets();
        console.log(`✅ Registry initialized with ${allTargets.length} targets`);

        // Test 2: Individual target loading
        console.log('\n2️⃣ Testing individual target loading...');
        const votePortal = getMunicipalityVotingTargetById('vote-portal');
        const voteAdmin = getMunicipalityVotingTargetById('vote-admin');
        console.log(`✅ Vote portal target: ${votePortal?.name}`);
        console.log(`✅ Vote admin target: ${voteAdmin?.name}`);

        // Test 3: Target group functionality
        console.log('\n3️⃣ Testing target group functionality...');
        const groupTargets = municipalityVotingGroup.getTargets();
        const groupStats = municipalityVotingGroup.getStatistics();
        console.log(`✅ Group contains ${groupTargets.length} targets`);
        console.log(`✅ Group statistics:`, groupStats);

        // Test 4: Registry methods
        console.log('\n4️⃣ Testing registry methods...');
        const criticalTargets = webTargetRegistry.getTargetsByCriticality('Critical');
        const webAppTargets = webTargetRegistry.getTargetsByType('web_application');
        console.log(`✅ Found ${criticalTargets.length} critical targets`);
        console.log(`✅ Found ${webAppTargets.length} web application targets`);

        // Test 5: Target methods
        console.log('\n5️⃣ Testing target methods...');
        if (votePortal) {
            console.log(`✅ Vote portal has ${votePortal.endpoints.length} endpoints`);
            console.log(`✅ Vote portal is active: ${votePortal.isActive()}`);
            console.log(`✅ Vote portal is critical: ${votePortal.isCritical()}`);
        }

        // Test 6: Async target loading
        console.log('\n6️⃣ Testing async target loading...');
        const asyncTarget = await webTargetRegistry.getTargetAsync('vote-api');
        console.log(`✅ Async loaded target: ${asyncTarget?.name}`);

        console.log('\n🎉 All tests passed! Refactored target system is working correctly.');
        return true;

    } catch (error) {
        console.error('\n❌ Test failed:', error);
        return false;
    }
}

/**
 * Test target creation and modification
 */
export function testTargetModification() {
    console.log('🔧 Testing target modification...\n');

    try {
        // Create a test target
        const testTarget = getMunicipalityVotingTargetById('vote-portal');
        if (!testTarget) {
            throw new Error('Could not load test target');
        }

        // Test endpoint management
        const originalEndpointCount = testTarget.endpoints.length;
        testTarget.addEndpoint('/test-endpoint');
        console.log(`✅ Added endpoint. Count: ${originalEndpointCount} → ${testTarget.endpoints.length}`);

        testTarget.removeEndpoint('/test-endpoint');
        console.log(`✅ Removed endpoint. Count: ${testTarget.endpoints.length} → ${originalEndpointCount}`);

        // Test form management
        testTarget.addForm({ name: 'Test Form', action: '/test', method: 'POST' });
        console.log(`✅ Added form. Form count: ${testTarget.forms.length}`);

        // Test URL generation
        const fullUrl = testTarget.getFullUrl('/login');
        console.log(`✅ Generated full URL: ${fullUrl}`);

        console.log('\n🎉 Target modification tests passed!');
        return true;

    } catch (error) {
        console.error('\n❌ Target modification test failed:', error);
        return false;
    }
}

/**
 * Quick smoke test for browser console
 */
export function quickTest() {
    console.log('🚀 Quick Test - Refactored Target System');
    
    // Test direct imports
    const targets = getAllMunicipalityVotingTargets();
    console.log(`✅ Direct import loaded ${targets.length} targets`);
    
    targets.forEach(target => {
        console.log(`   - ${target.name} (${target.type})`);
    });

    return targets;
}

// Auto-run quick test if in browser environment
if (typeof window !== 'undefined') {
    console.log('Web Target Registry refactoring test loaded. Run quickTest() or testRefactoredTargetSystem() to test.');
}
