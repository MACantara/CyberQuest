/**
 * Municipality Voting System Targets
 * Index file for all municipality voting system targets
 */

export { createVotePortalTarget, votePortalTargetConfig } from './vote-portal-target.js';
export { createVoteDatabaseTarget, voteDatabaseTargetConfig } from './vote-database-target.js';
export { createVoteAdminTarget, voteAdminTargetConfig } from './vote-admin-target.js';
export { createVoteApiTarget, voteApiTargetConfig } from './vote-api-target.js';
export { MunicipalityVotingGroup, municipalityVotingGroup } from './municipality-voting-group.js';

/**
 * Get all municipality voting targets
 * @returns {Array} Array of WebTarget instances
 */
export function getAllMunicipalityVotingTargets() {
    return [
        createVotePortalTarget(),
        createVoteDatabaseTarget(),
        createVoteAdminTarget(),
        createVoteApiTarget()
    ];
}

/**
 * Get municipality voting target by ID
 * @param {string} id - Target ID
 * @returns {WebTarget|null} Target instance or null
 */
export function getMunicipalityVotingTargetById(id) {
    const targetMap = {
        'vote-portal': createVotePortalTarget,
        'vote-database': createVoteDatabaseTarget,
        'vote-admin': createVoteAdminTarget,
        'vote-api': createVoteApiTarget
    };
    
    return targetMap[id] ? targetMap[id]() : null;
}

/**
 * Get municipality voting group configuration
 * @returns {Object} Group configuration
 */
export function getMunicipalityVotingGroupConfig() {
    return municipalityVotingGroup.getGroupConfig();
}
