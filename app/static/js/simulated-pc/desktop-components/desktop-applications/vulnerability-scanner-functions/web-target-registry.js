export class WebTargetRegistry {
    constructor() {
        this.targets = new Map();
        this.targetGroups = new Map();
        
        // Initialize with municipality voting system targets
        this.initializeMunicipalityTargets();
    }

    initializeMunicipalityTargets() {
        // Main voting portal
        this.addTarget({
            id: 'vote-portal',
            name: 'Municipal Voting Portal',
            url: 'https://vote.municipality.gov',
            description: 'Primary voting interface for citizens',
            type: 'web_application',
            technology: 'PHP/MySQL',
            criticality: 'Critical',
            status: 'Active',
            lastScanned: null,
            vulnerabilities: [],
            endpoints: [
                '/login',
                '/register',
                '/vote',
                '/results',
                '/lookup',
                '/search',
                '/profile',
                '/contact'
            ],
            forms: [
                { name: 'Login Form', action: '/login', method: 'POST' },
                { name: 'Registration Form', action: '/register', method: 'POST' },
                { name: 'Vote Submission', action: '/vote', method: 'POST' },
                { name: 'Voter Lookup', action: '/lookup', method: 'GET' }
            ]
        });

        // Database server
        this.addTarget({
            id: 'vote-database',
            name: 'Voting Database Server',
            url: 'https://vote-db.municipality.gov',
            description: 'Backend database containing voting records',
            type: 'database_server',
            technology: 'MySQL 5.7',
            criticality: 'Critical',
            status: 'Active',
            lastScanned: null,
            vulnerabilities: [],
            endpoints: [
                '/phpmyadmin',
                '/admin',
                '/backup',
                '/logs'
            ]
        });

        // Administrative interface
        this.addTarget({
            id: 'vote-admin',
            name: 'Election Administration Panel',
            url: 'https://vote-admin.municipality.gov',
            description: 'Administrative interface for election officials',
            type: 'admin_panel',
            technology: 'ASP.NET',
            criticality: 'Critical',
            status: 'Active',
            lastScanned: null,
            vulnerabilities: [],
            endpoints: [
                '/admin',
                '/admin/login',
                '/admin/dashboard',
                '/admin/settings',
                '/admin/users',
                '/admin/reports',
                '/admin/audit',
                '/api/admin'
            ],
            forms: [
                { name: 'Admin Login', action: '/admin/login', method: 'POST' },
                { name: 'User Management', action: '/admin/users', method: 'POST' },
                { name: 'System Settings', action: '/admin/settings', method: 'POST' }
            ]
        });

        // API endpoints
        this.addTarget({
            id: 'vote-api',
            name: 'Voting API Service',
            url: 'https://api.vote.municipality.gov',
            description: 'REST API for mobile voting applications',
            type: 'api_service',
            technology: 'Node.js/Express',
            criticality: 'High',
            status: 'Active',
            lastScanned: null,
            vulnerabilities: [],
            endpoints: [
                '/api/v1/auth',
                '/api/v1/vote',
                '/api/v1/candidates',
                '/api/v1/results',
                '/api/v1/voter',
                '/api/v1/election'
            ]
        });

        // Create target group
        this.createTargetGroup('municipality-voting', 'Municipality Voting System', [
            'vote-portal',
            'vote-database', 
            'vote-admin',
            'vote-api'
        ]);
    }

    addTarget(targetData) {
        const target = new WebTarget(targetData);
        this.targets.set(target.id, target);
        return target;
    }

    getTarget(id) {
        return this.targets.get(id);
    }

    getAllTargets() {
        return Array.from(this.targets.values());
    }

    getTargetsByType(type) {
        return Array.from(this.targets.values())
            .filter(target => target.type === type);
    }

    getTargetsByCriticality(criticality) {
        return Array.from(this.targets.values())
            .filter(target => target.criticality === criticality);
    }

    createTargetGroup(id, name, targetIds) {
        const group = {
            id,
            name,
            targetIds: targetIds || [],
            created: new Date().toISOString()
        };
        this.targetGroups.set(id, group);
        return group;
    }

    getTargetGroup(id) {
        return this.targetGroups.get(id);
    }

    getTargetsInGroup(groupId) {
        const group = this.targetGroups.get(groupId);
        if (!group) return [];
        
        return group.targetIds.map(id => this.targets.get(id)).filter(Boolean);
    }

    updateTargetStatus(targetId, status) {
        const target = this.targets.get(targetId);
        if (target) {
            target.status = status;
            target.lastUpdated = new Date().toISOString();
        }
    }

    addVulnerabilityToTarget(targetId, vulnerability) {
        const target = this.targets.get(targetId);
        if (target) {
            target.vulnerabilities.push(vulnerability);
            target.lastScanned = new Date().toISOString();
        }
    }

    getTargetsWithVulnerabilities() {
        return Array.from(this.targets.values())
            .filter(target => target.vulnerabilities.length > 0);
    }

    searchTargets(query) {
        const lowercaseQuery = query.toLowerCase();
        return Array.from(this.targets.values()).filter(target => 
            target.name.toLowerCase().includes(lowercaseQuery) ||
            target.description.toLowerCase().includes(lowercaseQuery) ||
            target.url.toLowerCase().includes(lowercaseQuery)
        );
    }

    getTargetStatistics() {
        const targets = Array.from(this.targets.values());
        
        return {
            total: targets.length,
            byType: this.groupBy(targets, 'type'),
            byCriticality: this.groupBy(targets, 'criticality'),
            byStatus: this.groupBy(targets, 'status'),
            vulnerableTargets: targets.filter(t => t.vulnerabilities.length > 0).length,
            lastScanned: targets.reduce((latest, target) => {
                if (!target.lastScanned) return latest;
                return !latest || new Date(target.lastScanned) > new Date(latest) 
                    ? target.lastScanned 
                    : latest;
            }, null)
        };
    }

    groupBy(array, property) {
        return array.reduce((acc, item) => {
            const key = item[property];
            acc[key] = (acc[key] || 0) + 1;
            return acc;
        }, {});
    }

    exportTargets() {
        return {
            targets: Object.fromEntries(this.targets),
            targetGroups: Object.fromEntries(this.targetGroups),
            exported: new Date().toISOString()
        };
    }

    importTargets(data) {
        if (data.targets) {
            for (const [id, targetData] of Object.entries(data.targets)) {
                this.targets.set(id, new WebTarget(targetData));
            }
        }
        
        if (data.targetGroups) {
            for (const [id, groupData] of Object.entries(data.targetGroups)) {
                this.targetGroups.set(id, groupData);
            }
        }
    }
}

class WebTarget {
    constructor(data) {
        this.id = data.id;
        this.name = data.name;
        this.url = data.url;
        this.description = data.description || '';
        this.type = data.type || 'web_application';
        this.technology = data.technology || 'Unknown';
        this.criticality = data.criticality || 'Medium';
        this.status = data.status || 'Unknown';
        this.lastScanned = data.lastScanned || null;
        this.vulnerabilities = data.vulnerabilities || [];
        this.endpoints = data.endpoints || [];
        this.forms = data.forms || [];
        this.headers = data.headers || {};
        this.cookies = data.cookies || [];
        this.created = data.created || new Date().toISOString();
        this.lastUpdated = data.lastUpdated || new Date().toISOString();
    }

    addEndpoint(endpoint) {
        if (!this.endpoints.includes(endpoint)) {
            this.endpoints.push(endpoint);
        }
    }

    removeEndpoint(endpoint) {
        this.endpoints = this.endpoints.filter(ep => ep !== endpoint);
    }

    addForm(form) {
        this.forms.push(form);
    }

    getFullUrl(endpoint = '') {
        return `${this.url}${endpoint}`;
    }

    hasEndpoint(endpoint) {
        return this.endpoints.includes(endpoint);
    }

    getVulnerabilityCount() {
        return this.vulnerabilities.length;
    }

    getHighestSeverityVulnerability() {
        if (this.vulnerabilities.length === 0) return null;
        
        const severityOrder = ['Critical', 'High', 'Medium', 'Low'];
        
        return this.vulnerabilities.reduce((highest, vuln) => {
            if (!highest) return vuln;
            
            const currentIndex = severityOrder.indexOf(vuln.severity);
            const highestIndex = severityOrder.indexOf(highest.severity);
            
            return currentIndex < highestIndex ? vuln : highest;
        });
    }

    getSeverityDistribution() {
        return this.vulnerabilities.reduce((acc, vuln) => {
            acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;
            return acc;
        }, {});
    }

    isActive() {
        return this.status === 'Active';
    }

    isCritical() {
        return this.criticality === 'Critical';
    }

    getAge() {
        return Date.now() - new Date(this.created).getTime();
    }

    getTimeSinceLastScan() {
        if (!this.lastScanned) return null;
        return Date.now() - new Date(this.lastScanned).getTime();
    }

    toJSON() {
        return {
            id: this.id,
            name: this.name,
            url: this.url,
            description: this.description,
            type: this.type,
            technology: this.technology,
            criticality: this.criticality,
            status: this.status,
            lastScanned: this.lastScanned,
            vulnerabilities: this.vulnerabilities,
            endpoints: this.endpoints,
            forms: this.forms,
            headers: this.headers,
            cookies: this.cookies,
            created: this.created,
            lastUpdated: this.lastUpdated
        };
    }
}

// Export singleton instance
export const webTargetRegistry = new WebTargetRegistry();
