export class VulnerabilityScannerUI {
    constructor(container, vulnerabilityScanner, webTargetRegistry) {
        this.container = container;
        this.scanner = vulnerabilityScanner;
        this.registry = webTargetRegistry;
        
        this.currentScan = null;
        this.isScanning = false;
        
        this.elements = {};
        this.tabs = {};
        
        this.initializeUI();
        this.bindEvents();
    }

    initializeUI() {
        this.container.innerHTML = this.createMainHTML();
        this.cacheElements();
        this.initializeTabs();
        this.populateTargetList();
        this.updateStatistics();
    }

    createMainHTML() {
        return `
            <div class="h-full bg-black text-white overflow-hidden">
                <!-- Header -->
                <div class="bg-gray-800 border-b border-gray-600 p-4">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-3">
                            <div class="w-8 h-8 bg-red-600 rounded flex items-center justify-center">
                                <i class="bi bi-shield-exclamation text-white text-sm"></i>
                            </div>
                            <div>
                                <h2 class="text-lg font-semibold text-white">CyberQuest Vulnerability Scanner</h2>
                                <p class="text-xs text-gray-400">OWASP ZAP Simulation - Web Application Security Testing</p>
                            </div>
                        </div>
                        <div class="flex items-center space-x-2">
                            <div class="scan-status px-3 py-1 bg-gray-700 rounded text-xs font-mono">
                                Status: <span id="scanStatusText" class="text-green-400">Ready</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Main Interface -->
                <div class="flex h-full">
                    <!-- Left Panel - Targets & Configuration -->
                    <div class="w-1/3 bg-gray-700 border-r border-gray-600 overflow-y-auto">
                        <div class="p-4">
                            <!-- Target Selection -->
                            <div class="mb-6">
                                <h3 class="text-sm font-semibold text-gray-200 mb-3 flex items-center">
                                    <i class="bi bi-bullseye mr-2"></i>
                                    Target Selection
                                </h3>
                                <div class="space-y-2">
                                    <select id="targetSelect" class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded text-white text-sm focus:border-green-400 focus:outline-none cursor-pointer">
                                        <option value="">Select target...</option>
                                    </select>
                                    <input 
                                        type="text" 
                                        id="targetUrlInput"
                                        placeholder="https://vote.municipality.gov"
                                        class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded text-white text-sm focus:border-green-400 focus:outline-none"
                                    >
                                    <button 
                                        id="addTargetBtn"
                                        class="w-full px-4 py-2 bg-green-400 hover:bg-green-500 text-black rounded text-sm transition-colors font-medium cursor-pointer">
                                        Add Target
                                    </button>
                                </div>
                            </div>

                            <!-- Discovered Targets -->
                            <div class="mb-6">
                                <h3 class="text-sm font-semibold text-gray-200 mb-3 flex items-center">
                                    <i class="bi bi-list-ul mr-2"></i>
                                    Discovered Targets
                                </h3>
                                <div id="discoveredTargetsList" class="space-y-2">
                                    <!-- Targets will be populated here -->
                                </div>
                            </div>

                            <!-- Scan Configuration -->
                            <div class="mb-6">
                                <h3 class="text-sm font-semibold text-gray-200 mb-3 flex items-center">
                                    <i class="bi bi-gear mr-2"></i>
                                    Scan Configuration
                                </h3>
                                <div class="space-y-3">
                                    <!-- Scan Type Selection -->
                                    <div class="mb-3">
                                        <label class="text-sm font-medium text-gray-200 mb-2 block">Scan Type:</label>
                                        <select id="scanTypeSelect" class="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded text-white text-sm focus:border-green-400 focus:outline-none cursor-pointer">
                                            <option value="comprehensive">Comprehensive Scan</option>
                                            <option value="quick">Quick Scan</option>
                                            <option value="custom">Custom Scan</option>
                                        </select>
                                    </div>
                                    
                                    <!-- Custom Scan Options -->
                                    <div id="customScanOptions" class="scan-type-options hidden">
                                        <h4 class="text-sm font-medium text-gray-200 mb-2">Select Tests:</h4>
                                        <label class="flex items-center text-sm text-gray-300 mb-2 cursor-pointer">
                                            <input type="checkbox" id="sqlInjectionCheck" class="mr-2 accent-green-400" checked>
                                            SQL Injection Detection
                                        </label>
                                        <label class="flex items-center text-sm text-gray-300 mb-2 cursor-pointer">
                                            <input type="checkbox" id="xssCheck" class="mr-2 accent-green-400" checked>
                                            Cross-Site Scripting (XSS)
                                        </label>
                                        <label class="flex items-center text-sm text-gray-300 mb-2 cursor-pointer">
                                            <input type="checkbox" id="directoryTraversalCheck" class="mr-2 accent-green-400" checked>
                                            Directory Traversal
                                        </label>
                                        <label class="flex items-center text-sm text-gray-300 mb-2 cursor-pointer">
                                            <input type="checkbox" id="authBypassCheck" class="mr-2 accent-green-400" checked>
                                            Authentication Bypass
                                        </label>
                                        <label class="flex items-center text-sm text-gray-300 mb-2 cursor-pointer">
                                            <input type="checkbox" id="csrfCheck" class="mr-2 accent-green-400">
                                            CSRF Detection
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <!-- Scan Controls -->
                            <div class="space-y-2">
                                <button 
                                    id="scanToggleBtn"
                                    class="w-full px-4 py-3 bg-red-600 hover:bg-red-700 text-white rounded font-semibold transition-all duration-200 cursor-pointer"
                                    data-state="ready">
                                    <i class="bi bi-play-fill mr-2"></i>
                                    <span class="btn-text">Start Vulnerability Scan</span>
                                </button>
                                <button 
                                    id="exportResultsBtn"
                                    class="w-full px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded text-sm transition-colors cursor-pointer"
                                    disabled>
                                    <i class="bi bi-download mr-2"></i>
                                    Export Results
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Right Panel - Results & Details -->
                    <div class="flex-1 flex flex-col">
                        <!-- Progress Bar -->
                        <div id="progressContainer" class="bg-gray-800 border-b border-gray-600 p-4 hidden">
                            <div class="flex items-center justify-between mb-2">
                                <h3 class="text-sm font-semibold text-gray-200">Scan Progress</h3>
                                <span id="progressText" class="text-xs text-gray-400">0%</span>
                            </div>
                            <div class="w-full bg-gray-700 rounded-full h-2">
                                <div id="progressBar" class="bg-green-400 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                            </div>
                            <div id="currentTest" class="text-xs text-gray-500 mt-1"></div>
                        </div>

                        <!-- Statistics Panel -->
                        <div class="stats-panel bg-gray-800 px-4 py-2 border-b border-gray-600">
                            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                                <div class="stat-item">
                                    <div id="totalTargets" class="text-lg font-bold text-green-400">0</div>
                                    <div class="text-xs text-gray-400">Total Targets</div>
                                </div>
                                <div class="stat-item">
                                    <div id="vulnerableTargets" class="text-lg font-bold text-red-400">0</div>
                                    <div class="text-xs text-gray-400">Vulnerable</div>
                                </div>
                                <div class="stat-item">
                                    <div id="totalVulns" class="text-lg font-bold text-yellow-400">0</div>
                                    <div class="text-xs text-gray-400">Vulnerabilities</div>
                                </div>
                                <div class="stat-item">
                                    <div id="highSeverity" class="text-lg font-bold text-red-500">0</div>
                                    <div class="text-xs text-gray-400">High/Critical</div>
                                </div>
                            </div>
                        </div>

                        <!-- Tab Navigation -->
                        <div class="tab-navigation bg-gray-800 border-b border-gray-600">
                            <div class="flex">
                                <button class="tab-btn active px-4 py-2 text-sm font-medium border-r border-gray-600 bg-green-400 text-black cursor-pointer" data-tab="vulnerabilities">
                                    Vulnerabilities <span id="vulnCount" class="ml-1 px-2 py-0.5 bg-black text-xs rounded">0</span>
                                </button>
                                <button class="tab-btn px-4 py-2 text-sm font-medium border-r border-gray-600 text-gray-400 hover:text-white hover:bg-gray-700 transition-colors cursor-pointer" data-tab="requests">
                                    HTTP Requests <span id="requestCount" class="ml-1 px-2 py-0.5 bg-gray-600 text-xs rounded">0</span>
                                </button>
                                <button class="tab-btn px-4 py-2 text-sm font-medium border-r border-gray-600 text-gray-400 hover:text-white hover:bg-gray-700 transition-colors cursor-pointer" data-tab="evidence">
                                    Evidence <span id="evidenceCount" class="ml-1 px-2 py-0.5 bg-gray-600 text-xs rounded">0</span>
                                </button>
                                <button class="tab-btn px-4 py-2 text-sm font-medium text-gray-400 hover:text-white hover:bg-gray-700 transition-colors cursor-pointer" data-tab="targets">
                                    Target Management
                                </button>
                            </div>
                        </div>

                        <!-- Tab Content -->
                        <div class="tab-content flex-1 overflow-hidden bg-black">
                            <!-- Vulnerabilities Tab -->
                            <div id="vulnerabilitiesTab" class="tab-pane active h-full overflow-auto">
                                <div class="vulnerabilities-list p-4">
                                    <div id="vulnerabilitiesContainer" class="space-y-3">
                                        <div class="text-center text-gray-500 py-8">
                                            <i class="bi bi-shield-check text-4xl mb-4"></i>
                                            <p>No vulnerabilities found yet. Start a scan to begin testing.</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- HTTP Requests Tab -->
                            <div id="requestsTab" class="tab-pane h-full overflow-auto hidden">
                                <div class="requests-list p-4">
                                    <div id="requestsContainer">
                                        <div class="text-center text-gray-500 py-8">
                                            <i class="bi bi-arrow-left-right text-4xl mb-4"></i>
                                            <p>HTTP request history will appear here during scanning.</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Evidence Tab -->
                            <div id="evidenceTab" class="tab-pane h-full overflow-auto hidden">
                                <div class="evidence-list p-4">
                                    <div id="evidenceContainer">
                                        <div class="text-center text-gray-500 py-8">
                                            <i class="bi bi-camera text-4xl mb-4"></i>
                                            <p>No evidence collected. Evidence will be gathered during vulnerability detection.</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Target Management Tab -->
                            <div id="targetsTab" class="tab-pane h-full overflow-auto hidden">
                                <div class="target-management p-4">
                                    <div class="mb-4">
                                        <h3 class="text-lg font-semibold mb-2 text-gray-200">Target Registry</h3>
                                        <div id="targetsList" class="space-y-2">
                                            <!-- Target list will be populated here -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    cacheElements() {
        // Status and controls
        this.elements.scanStatusText = document.getElementById('scanStatusText');
        this.elements.targetSelect = document.getElementById('targetSelect');
        this.elements.targetUrlInput = document.getElementById('targetUrlInput');
        this.elements.addTargetBtn = document.getElementById('addTargetBtn');
        this.elements.discoveredTargetsList = document.getElementById('discoveredTargetsList');
        this.elements.scanTypeSelect = document.getElementById('scanTypeSelect');
        this.elements.scanToggleBtn = document.getElementById('scanToggleBtn');
        this.elements.exportResultsBtn = document.getElementById('exportResultsBtn');
        this.elements.customScanOptions = document.getElementById('customScanOptions');

        // Progress
        this.elements.progressContainer = document.getElementById('progressContainer');
        this.elements.progressBar = document.getElementById('progressBar');
        this.elements.progressText = document.getElementById('progressText');
        this.elements.currentTest = document.getElementById('currentTest');

        // Statistics
        this.elements.totalTargets = document.getElementById('totalTargets');
        this.elements.vulnerableTargets = document.getElementById('vulnerableTargets');
        this.elements.totalVulns = document.getElementById('totalVulns');
        this.elements.highSeverity = document.getElementById('highSeverity');

        // Content containers
        this.elements.vulnerabilitiesContainer = document.getElementById('vulnerabilitiesContainer');
        this.elements.requestsContainer = document.getElementById('requestsContainer');
        this.elements.evidenceContainer = document.getElementById('evidenceContainer');
        this.elements.targetsList = document.getElementById('targetsList');

        // Counters
        this.elements.vulnCount = document.getElementById('vulnCount');
        this.elements.requestCount = document.getElementById('requestCount');
        this.elements.evidenceCount = document.getElementById('evidenceCount');

        // Scan options
        this.elements.scanOptions = {
            sqlInjection: document.getElementById('sqlInjectionCheck'),
            xss: document.getElementById('xssCheck'),
            directoryTraversal: document.getElementById('directoryTraversalCheck'),
            authenticationBypass: document.getElementById('authBypassCheck'),
            csrf: document.getElementById('csrfCheck')
        };
    }

    initializeTabs() {
        const tabBtns = this.container.querySelectorAll('.tab-btn');
        const tabPanes = this.container.querySelectorAll('.tab-pane');

        tabBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const tabName = btn.dataset.tab;
                
                // Update button states - using email app style
                tabBtns.forEach(b => {
                    b.classList.remove('active', 'bg-green-400', 'text-black');
                    b.classList.add('text-gray-400', 'hover:text-white', 'hover:bg-gray-700');
                });
                btn.classList.add('active', 'bg-green-400', 'text-black');
                btn.classList.remove('text-gray-400', 'hover:text-white', 'hover:bg-gray-700');
                
                // Update pane visibility
                tabPanes.forEach(pane => {
                    pane.classList.add('hidden');
                    pane.classList.remove('active');
                });
                
                const targetPane = document.getElementById(`${tabName}Tab`);
                if (targetPane) {
                    targetPane.classList.remove('hidden');
                    targetPane.classList.add('active');
                }
            });
        });
    }

    bindEvents() {
        // Scan type change handler
        this.elements.scanTypeSelect.addEventListener('change', (e) => {
            if (e.target.value === 'custom') {
                this.elements.customScanOptions.classList.remove('hidden');
            } else {
                this.elements.customScanOptions.classList.add('hidden');
            }
        });

        // Add target button
        this.elements.addTargetBtn.addEventListener('click', () => {
            this.addCustomTarget();
        });

        // Toggle scan button
        this.elements.scanToggleBtn.addEventListener('click', () => {
            if (this.isScanning) {
                this.stopScan();
            } else {
                this.startScan();
            }
        });

        // Export results button
        this.elements.exportResultsBtn.addEventListener('click', () => {
            this.exportResults();
        });

        // Target selection change
        this.elements.targetSelect.addEventListener('change', (e) => {
            if (e.target.value) {
                this.selectTarget(e.target.value);
            }
        });
    }

    populateTargetList() {
        const targets = this.registry.getAllTargets();
        
        // Clear existing options
        this.elements.targetSelect.innerHTML = '<option value="">Select target...</option>';
        
        // Add targets to select
        targets.forEach(target => {
            const option = document.createElement('option');
            option.value = target.id;
            option.textContent = `${target.name} (${target.url})`;
            this.elements.targetSelect.appendChild(option);
        });

        // Update discovered targets list and targets tab
        this.updateDiscoveredTargetsList();
        this.updateTargetsList();
    }

    updateDiscoveredTargetsList() {
        const targets = this.registry.getAllTargets();
        
        this.elements.discoveredTargetsList.innerHTML = targets.map(target => `
            <div class="target-card bg-gray-800 border border-gray-600 p-2 rounded hover:bg-gray-700 transition-colors cursor-pointer" data-target-id="${target.id}">
                <div class="flex justify-between items-center">
                    <div class="flex-1 min-w-0">
                        <h4 class="font-medium text-white text-sm truncate">${target.name}</h4>
                        <p class="text-xs text-gray-400 truncate">${target.url}</p>
                    </div>
                    <div class="text-right ml-2">
                        <span class="inline-block px-2 py-1 text-xs rounded ${this.getCriticalityColor(target.criticality)}">
                            ${target.criticality}
                        </span>
                        <div class="text-xs text-gray-400 mt-1">
                            ${target.vulnerabilities.length} vulns
                        </div>
                    </div>
                </div>
            </div>
        `).join('');

        // Add click events to target cards
        this.elements.discoveredTargetsList.querySelectorAll('.target-card').forEach(card => {
            card.addEventListener('click', () => {
                const targetId = card.dataset.targetId;
                this.elements.targetSelect.value = targetId;
                this.selectTarget(targetId);
            });
        });
    }

    updateTargetsList() {
        const targets = this.registry.getAllTargets();
        
        this.elements.targetsList.innerHTML = targets.map(target => `
            <div class="target-card bg-gray-800 border border-gray-600 p-3 rounded hover:bg-gray-700 transition-colors cursor-pointer">
                <div class="flex justify-between items-start">
                    <div>
                        <h4 class="font-medium text-white">${target.name}</h4>
                        <p class="text-sm text-gray-400">${target.url}</p>
                        <p class="text-xs text-gray-500">${target.description}</p>
                        <div class="flex items-center space-x-2 mt-2">
                            <span class="text-xs text-gray-400">Technology:</span>
                            <span class="text-xs text-gray-300">${target.technology}</span>
                        </div>
                        <div class="flex items-center space-x-2 mt-1">
                            <span class="text-xs text-gray-400">Endpoints:</span>
                            <span class="text-xs text-gray-300">${target.endpoints.length} found</span>
                        </div>
                    </div>
                    <div class="text-right">
                        <span class="inline-block px-2 py-1 text-xs rounded ${this.getCriticalityColor(target.criticality)}">
                            ${target.criticality}
                        </span>
                        <div class="text-xs text-gray-400 mt-1">
                            ${target.vulnerabilities.length} vulnerabilities
                        </div>
                        <div class="text-xs text-gray-500 mt-1">
                            Last scan: ${target.lastScanned ? new Date(target.lastScanned).toLocaleDateString() : 'Never'}
                        </div>
                    </div>
                </div>
            </div>
        `).join('');
    }

    getCriticalityColor(criticality) {
        const colors = {
            'Critical': 'bg-red-100 text-red-800',
            'High': 'bg-orange-100 text-orange-800',
            'Medium': 'bg-yellow-100 text-yellow-800',
            'Low': 'bg-green-100 text-green-800'
        };
        return colors[criticality] || 'bg-gray-100 text-gray-800';
    }

    updateStatistics() {
        const stats = this.registry.getTargetStatistics();
        
        this.elements.totalTargets.textContent = stats.total;
        this.elements.vulnerableTargets.textContent = stats.vulnerableTargets;
        
        // Calculate total vulnerabilities and high severity count
        const targets = this.registry.getAllTargets();
        const totalVulns = targets.reduce((sum, target) => sum + target.vulnerabilities.length, 0);
        const highSeverity = targets.reduce((sum, target) => {
            return sum + target.vulnerabilities.filter(v => 
                v.severity === 'Critical' || v.severity === 'High'
            ).length;
        }, 0);
        
        this.elements.totalVulns.textContent = totalVulns;
        this.elements.highSeverity.textContent = highSeverity;
    }

    addCustomTarget() {
        const url = this.elements.targetUrlInput.value.trim();
        if (!url) return;

        // Basic URL validation
        try {
            new URL(url);
        } catch {
            this.showNotification('Please enter a valid URL', 'error');
            return;
        }

        // Extract domain for name
        const domain = new URL(url).hostname;
        const targetData = {
            id: `custom-${Date.now()}`,
            name: `Custom Target - ${domain}`,
            url: url,
            description: `Custom target added by user`,
            type: 'web_application',
            technology: 'Unknown',
            criticality: 'Medium',
            status: 'Active',
            lastScanned: null,
            vulnerabilities: [],
            endpoints: ['/'],
            forms: []
        };

        this.registry.addTarget(targetData);
        this.populateTargetList();
        this.updateStatistics();
        this.elements.targetUrlInput.value = '';
        this.showNotification(`Target ${domain} added successfully`, 'success');
    }

    selectTarget(targetId) {
        const target = this.registry.getTarget(targetId);
        if (target) {
            this.selectedTarget = target;
            this.showNotification(`Selected target: ${target.name}`, 'info');
        }
    }

    async startScan() {
        const selectedTargetId = this.elements.targetSelect.value;
        if (!selectedTargetId) {
            this.showNotification('Please select a target to scan', 'error');
            return;
        }

        const target = this.registry.getTarget(selectedTargetId);
        if (!target) {
            this.showNotification('Selected target not found', 'error');
            return;
        }

        this.isScanning = true;
        this.updateScanControls();
        this.showProgress();

        const scanOptions = this.getScanOptions();

        try {
            this.currentScan = await this.scanner.startScan(target.url, scanOptions, {
                onProgress: (progress) => {
                    this.updateProgress(progress);
                },
                onVulnerabilityFound: (vulnerability) => {
                    this.handleVulnerabilityFound(vulnerability);
                    this.registry.addVulnerabilityToTarget(selectedTargetId, vulnerability);
                },
                onRequestMade: (request) => {
                    this.handleRequestMade(request);
                },
                onEvidenceCollected: (evidence) => {
                    this.handleEvidenceCollected(evidence);
                }
            });

            await this.currentScan.waitForCompletion();
            this.handleScanComplete();
            
        } catch (error) {
            this.handleScanError(error);
        }
    }

    stopScan() {
        if (this.currentScan) {
            this.currentScan.stop();
            this.currentScan = null;
        }
        this.isScanning = false;
        this.updateScanControls();
        this.hideProgress();
        this.handleScanStopped();
    }

    getScanOptions() {
        const scanType = this.elements.scanTypeSelect.value;
        
        if (scanType === 'custom') {
            return {
                sqlInjection: this.elements.scanOptions.sqlInjection.checked,
                xss: this.elements.scanOptions.xss.checked,
                directoryTraversal: this.elements.scanOptions.directoryTraversal.checked,
                authenticationBypass: this.elements.scanOptions.authenticationBypass.checked,
                csrf: this.elements.scanOptions.csrf.checked
            };
        } else if (scanType === 'quick') {
            return {
                sqlInjection: true,
                xss: true,
                directoryTraversal: false,
                authenticationBypass: true,
                csrf: false
            };
        } else {
            // Comprehensive scan
            return {
                sqlInjection: true,
                xss: true,
                directoryTraversal: true,
                authenticationBypass: true,
                csrf: true
            };
        }
    }

    updateScanControls() {
        const btn = this.elements.scanToggleBtn;
        const icon = btn.querySelector('i');
        const text = btn.querySelector('.btn-text');
        
        if (this.isScanning) {
            btn.classList.remove('bg-red-600', 'hover:bg-red-700');
            btn.classList.add('bg-gray-600', 'hover:bg-gray-700');
            btn.dataset.state = 'scanning';
            icon.className = 'bi bi-stop-fill mr-2';
            text.textContent = 'Stop Vulnerability Scan';
            this.elements.exportResultsBtn.disabled = true;
        } else {
            btn.classList.remove('bg-gray-600', 'hover:bg-gray-700');
            btn.classList.add('bg-red-600', 'hover:bg-red-700');
            btn.dataset.state = 'ready';
            icon.className = 'bi bi-play-fill mr-2';
            text.textContent = 'Start Vulnerability Scan';
            this.elements.exportResultsBtn.disabled = false;
        }
        
        this.elements.scanStatusText.textContent = this.isScanning ? 'Scanning...' : 'Ready';
        this.elements.scanStatusText.className = this.isScanning ? 'text-yellow-400' : 'text-green-400';
    }

    showProgress() {
        this.elements.progressContainer.classList.remove('hidden');
        this.updateProgress(0);
    }

    hideProgress() {
        this.elements.progressContainer.classList.add('hidden');
    }

    updateProgress(progress) {
        this.elements.progressBar.style.width = `${progress}%`;
        this.elements.progressText.textContent = `${progress}%`;
    }

    handleVulnerabilityFound(vulnerability) {
        this.addVulnerabilityToUI(vulnerability);
        this.updateCounters();
        this.updateStatistics();
    }

    handleRequestMade(request) {
        this.addRequestToUI(request);
        this.updateCounters();
    }

    handleEvidenceCollected(evidence) {
        this.addEvidenceToUI(evidence);
        this.updateCounters();
    }

    handleScanComplete() {
        this.isScanning = false;
        this.updateScanControls();
        this.hideProgress();
        this.updateStatistics();
        this.updateDiscoveredTargetsList();
        this.updateTargetsList();
        this.showNotification('Vulnerability scan completed successfully', 'success');
    }

    handleScanStopped() {
        this.showNotification('Vulnerability scan stopped', 'warning');
    }

    handleScanError(error) {
        this.isScanning = false;
        this.updateScanControls();
        this.hideProgress();
        this.showNotification(`Scan failed: ${error.message}`, 'error');
    }

    addVulnerabilityToUI(vulnerability) {
        if (this.elements.vulnerabilitiesContainer.querySelector('.text-center')) {
            this.elements.vulnerabilitiesContainer.innerHTML = '';
        }

        const vulnElement = document.createElement('div');
        vulnElement.className = 'vulnerability-card bg-gray-800 border border-gray-600 p-4 rounded-l-4 hover:bg-gray-700 transition-colors cursor-pointer ' + 
            this.getSeverityBorderColor(vulnerability.severity);
        
        vulnElement.innerHTML = `
            <div class="flex justify-between items-start mb-2">
                <h3 class="font-semibold text-white">${vulnerability.title}</h3>
                <span class="px-2 py-1 text-xs rounded ${this.getSeverityColor(vulnerability.severity)}">
                    ${vulnerability.severity}
                </span>
            </div>
            <p class="text-sm text-gray-300 mb-2">${vulnerability.description}</p>
            <div class="text-xs text-gray-400 space-y-1">
                <div><strong class="text-gray-300">Target:</strong> ${vulnerability.target}</div>
                <div><strong class="text-gray-300">Parameter:</strong> ${vulnerability.parameter}</div>
                <div><strong class="text-gray-300">CVSS Score:</strong> ${vulnerability.cvssScore}</div>
                <div><strong class="text-gray-300">Impact:</strong> ${vulnerability.impact}</div>
                <div><strong class="text-gray-300">Recommendation:</strong> ${vulnerability.recommendation}</div>
            </div>
        `;

        this.elements.vulnerabilitiesContainer.appendChild(vulnElement);
    }

    addRequestToUI(request) {
        if (this.elements.requestsContainer.querySelector('.text-center')) {
            this.elements.requestsContainer.innerHTML = '';
        }

        const requestElement = document.createElement('div');
        requestElement.className = 'request-card bg-gray-800 border border-gray-600 p-3 rounded mb-2 hover:bg-gray-700 transition-colors cursor-pointer';
        
        requestElement.innerHTML = `
            <div class="flex justify-between items-start mb-2">
                <span class="font-mono text-sm text-green-400">${request.method} ${request.url}</span>
                <span class="text-xs text-gray-500">${new Date(request.timestamp).toLocaleTimeString()}</span>
            </div>
            <div class="text-xs text-gray-400">
                <div><strong class="text-gray-300">Test:</strong> ${request.testName}</div>
                <div><strong class="text-gray-300">Payload:</strong> <code class="bg-gray-900 text-gray-300 px-1 rounded">${request.payload}</code></div>
            </div>
        `;

        this.elements.requestsContainer.appendChild(requestElement);
    }

    addEvidenceToUI(evidence) {
        if (this.elements.evidenceContainer.querySelector('.text-center')) {
            this.elements.evidenceContainer.innerHTML = '';
        }

        const evidenceElement = document.createElement('div');
        evidenceElement.className = 'evidence-card bg-gray-800 border border-gray-600 p-3 rounded mb-2 hover:bg-gray-700 transition-colors cursor-pointer';
        
        evidenceElement.innerHTML = `
            <div class="flex justify-between items-start mb-2">
                <h4 class="font-medium text-white">${evidence.title}</h4>
                <span class="text-xs text-gray-500">${new Date(evidence.timestamp).toLocaleTimeString()}</span>
            </div>
            <div class="text-sm space-y-1">
                <div><strong class="text-gray-300">Type:</strong> <span class="text-gray-400">${evidence.type}</span></div>
                <div><strong class="text-gray-300">URL:</strong> <code class="text-xs bg-gray-900 text-gray-300 px-1 rounded">${evidence.request.url}</code></div>
                <div><strong class="text-gray-300">Vulnerability ID:</strong> <code class="text-xs bg-gray-900 text-gray-300 px-1 rounded">${evidence.vulnerabilityId}</code></div>
            </div>
        `;

        this.elements.evidenceContainer.appendChild(evidenceElement);
    }

    updateCounters() {
        const vulnCount = this.elements.vulnerabilitiesContainer.children.length;
        const requestCount = this.elements.requestsContainer.children.length;
        const evidenceCount = this.elements.evidenceContainer.children.length;

        this.elements.vulnCount.textContent = vulnCount;
        this.elements.requestCount.textContent = requestCount;
        this.elements.evidenceCount.textContent = evidenceCount;
    }

    getSeverityColor(severity) {
        const colors = {
            'Critical': 'bg-red-100 text-red-800',
            'High': 'bg-orange-100 text-orange-800',
            'Medium': 'bg-yellow-100 text-yellow-800',
            'Low': 'bg-green-100 text-green-800'
        };
        return colors[severity] || 'bg-gray-100 text-gray-800';
    }

    getSeverityBorderColor(severity) {
        const colors = {
            'Critical': 'border-red-500',
            'High': 'border-orange-500',
            'Medium': 'border-yellow-500',
            'Low': 'border-green-500'
        };
        return colors[severity] || 'border-gray-500';
    }

    exportResults() {
        if (!this.currentScan) {
            this.showNotification('No scan results to export', 'warning');
            return;
        }

        const results = {
            timestamp: new Date().toISOString(),
            target: this.currentScan.target,
            vulnerabilities: this.currentScan.getVulnerabilities(),
            requests: this.currentScan.getRequests(),
            evidence: this.currentScan.getEvidence(),
            summary: this.currentScan.getSummary()
        };

        // Simulate file download
        const blob = new Blob([JSON.stringify(results, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `vuln_scan_results_${Date.now()}.json`;
        a.click();
        URL.revokeObjectURL(url);
        
        this.showNotification('Scan results exported successfully', 'success');
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 px-4 py-2 rounded-lg text-white text-sm z-50 ${
            type === 'success' ? 'bg-green-600' : 
            type === 'error' ? 'bg-red-600' : 
            type === 'warning' ? 'bg-yellow-600' : 'bg-blue-600'
        }`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 3000);
    }

    refresh() {
        this.populateTargetList();
        this.updateStatistics();
    }

    destroy() {
        if (this.currentScan && this.isScanning) {
            this.currentScan.stop();
        }
    }
}