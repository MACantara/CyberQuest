export class VulnerabilityScannerUI {
    constructor(container, vulnerabilityScanner, webTargetRegistry) {
        this.container = container;
        this.scanner = vulnerabilityScanner;
        this.registry = webTargetRegistry;
        
        this.currentScan = null;
        this.isScanning = false;
        
        this.elements = {};
        this.tabs = {};
        
        this.initializeUI();
        this.bindEvents();
    }

    initializeUI() {
        this.container.innerHTML = this.createMainHTML();
        this.cacheElements();
        this.initializeTabs();
        this.populateTargetList();
        this.updateStatistics();
    }

    createMainHTML() {
        return `
            <div class="vulnerability-scanner-ui h-full flex flex-col bg-black text-white">
                <!-- Header -->
                <div class="scanner-header bg-gray-800 text-white px-4 py-2 border-b border-gray-600">
                    <h2 class="text-lg font-semibold">Web Application Vulnerability Scanner</h2>
                    <div class="scanner-status text-sm text-gray-300" id="scannerStatus">
                        Ready to scan
                    </div>
                </div>

                <!-- Control Panel -->
                <div class="control-panel bg-gray-700 p-4 border-b border-gray-600">
                    <div class="flex flex-wrap gap-4 items-center">
                        <!-- Target Selection -->
                        <div class="flex items-center space-x-2">
                            <label class="text-sm font-medium text-gray-200">Target:</label>
                            <select id="targetSelect" class="px-3 py-1 bg-gray-800 border border-gray-600 rounded text-white text-sm min-w-[200px] focus:border-green-400 focus:outline-none cursor-pointer">
                                <option value="">Select target...</option>
                            </select>
                        </div>

                        <!-- Scan Type -->
                        <div class="flex items-center space-x-2">
                            <label class="text-sm font-medium text-gray-200">Scan Type:</label>
                            <select id="scanTypeSelect" class="px-3 py-1 bg-gray-800 border border-gray-600 rounded text-white text-sm focus:border-green-400 focus:outline-none cursor-pointer">
                                <option value="comprehensive">Comprehensive Scan</option>
                                <option value="quick">Quick Scan</option>
                                <option value="custom">Custom Scan</option>
                            </select>
                        </div>

                        <!-- Scan Controls -->
                        <div class="flex space-x-2">
                            <button id="startScanBtn" class="px-4 py-1 bg-green-400 text-black rounded hover:bg-green-500 text-sm font-medium transition-colors cursor-pointer">
                                Start Scan
                            </button>
                            <button id="stopScanBtn" class="px-4 py-1 bg-red-600 text-white rounded hover:bg-red-700 text-sm font-medium transition-colors cursor-pointer" disabled>
                                Stop Scan
                            </button>
                        </div>
                    </div>

                    <!-- Custom Scan Options (initially hidden) -->
                    <div id="customScanOptions" class="mt-3 p-3 bg-gray-800 rounded border border-gray-600 hidden">
                        <h3 class="text-sm font-medium mb-2 text-gray-200">Scan Options:</h3>
                        <div class="grid grid-cols-2 md:grid-cols-3 gap-2">
                            <label class="flex items-center space-x-2 cursor-pointer">
                                <input type="checkbox" id="sqlInjectionCheck" checked class="scan-option accent-green-400">
                                <span class="text-sm text-gray-300">SQL Injection</span>
                            </label>
                            <label class="flex items-center space-x-2 cursor-pointer">
                                <input type="checkbox" id="xssCheck" checked class="scan-option accent-green-400">
                                <span class="text-sm text-gray-300">Cross-Site Scripting</span>
                            </label>
                            <label class="flex items-center space-x-2 cursor-pointer">
                                <input type="checkbox" id="directoryTraversalCheck" checked class="scan-option accent-green-400">
                                <span class="text-sm text-gray-300">Directory Traversal</span>
                            </label>
                            <label class="flex items-center space-x-2 cursor-pointer">
                                <input type="checkbox" id="authBypassCheck" checked class="scan-option accent-green-400">
                                <span class="text-sm text-gray-300">Authentication Bypass</span>
                            </label>
                            <label class="flex items-center space-x-2 cursor-pointer">
                                <input type="checkbox" id="csrfCheck" checked class="scan-option accent-green-400">
                                <span class="text-sm text-gray-300">CSRF</span>
                            </label>
                        </div>
                    </div>
                </div>

                <!-- Progress Bar -->
                <div id="progressContainer" class="progress-container bg-gray-800 px-4 py-2 border-b border-gray-600 hidden">
                    <div class="flex items-center justify-between mb-1">
                        <span class="text-sm font-medium text-gray-200">Scanning Progress</span>
                        <span id="progressText" class="text-sm text-gray-400">0%</span>
                    </div>
                    <div class="w-full bg-gray-700 rounded-full h-2">
                        <div id="progressBar" class="bg-green-400 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                    </div>
                    <div id="currentTest" class="text-xs text-gray-500 mt-1"></div>
                </div>

                <!-- Statistics Panel -->
                <div class="stats-panel bg-gray-800 px-4 py-2 border-b border-gray-600">
                    <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                        <div class="stat-item">
                            <div id="totalTargets" class="text-lg font-bold text-green-400">0</div>
                            <div class="text-xs text-gray-400">Total Targets</div>
                        </div>
                        <div class="stat-item">
                            <div id="vulnerableTargets" class="text-lg font-bold text-red-400">0</div>
                            <div class="text-xs text-gray-400">Vulnerable</div>
                        </div>
                        <div class="stat-item">
                            <div id="totalVulns" class="text-lg font-bold text-yellow-400">0</div>
                            <div class="text-xs text-gray-400">Vulnerabilities</div>
                        </div>
                        <div class="stat-item">
                            <div id="highSeverity" class="text-lg font-bold text-red-500">0</div>
                            <div class="text-xs text-gray-400">High/Critical</div>
                        </div>
                    </div>
                </div>

                <!-- Tab Navigation -->
                <div class="tab-navigation bg-gray-800 border-b border-gray-600">
                    <div class="flex">
                        <button class="tab-btn active px-4 py-2 text-sm font-medium border-r border-gray-600 bg-green-400 text-black cursor-pointer" data-tab="vulnerabilities">
                            Vulnerabilities
                        </button>
                        <button class="tab-btn px-4 py-2 text-sm font-medium border-r border-gray-600 text-gray-400 hover:text-white hover:bg-gray-700 transition-colors cursor-pointer" data-tab="requests">
                            HTTP Requests
                        </button>
                        <button class="tab-btn px-4 py-2 text-sm font-medium border-r border-gray-600 text-gray-400 hover:text-white hover:bg-gray-700 transition-colors cursor-pointer" data-tab="evidence">
                            Evidence
                        </button>
                        <button class="tab-btn px-4 py-2 text-sm font-medium text-gray-400 hover:text-white hover:bg-gray-700 transition-colors cursor-pointer" data-tab="targets">
                            Target Management
                        </button>
                    </div>
                </div>

                <!-- Tab Content -->
                <div class="tab-content flex-1 overflow-hidden bg-black">
                    <!-- Vulnerabilities Tab -->
                    <div id="vulnerabilitiesTab" class="tab-pane active h-full overflow-auto">
                        <div class="vulnerabilities-list p-4">
                            <div id="vulnerabilitiesContainer" class="space-y-3">
                                <div class="text-center text-gray-500 py-8">
                                    No vulnerabilities found. Start a scan to identify security issues.
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- HTTP Requests Tab -->
                    <div id="requestsTab" class="tab-pane h-full overflow-auto hidden">
                        <div class="requests-list p-4">
                            <div id="requestsContainer">
                                <div class="text-center text-gray-500 py-8">
                                    No HTTP requests logged. Requests will appear here during scanning.
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Evidence Tab -->
                    <div id="evidenceTab" class="tab-pane h-full overflow-auto hidden">
                        <div class="evidence-list p-4">
                            <div id="evidenceContainer">
                                <div class="text-center text-gray-500 py-8">
                                    No evidence collected. Evidence will be gathered during vulnerability detection.
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Target Management Tab -->
                    <div id="targetsTab" class="tab-pane h-full overflow-auto hidden">
                        <div class="target-management p-4">
                            <div class="mb-4">
                                <h3 class="text-lg font-semibold mb-2 text-gray-200">Target Registry</h3>
                                <div id="targetsList" class="space-y-2">
                                    <!-- Target list will be populated here -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    cacheElements() {
        // Status and controls
        this.elements.scannerStatus = document.getElementById('scannerStatus');
        this.elements.targetSelect = document.getElementById('targetSelect');
        this.elements.scanTypeSelect = document.getElementById('scanTypeSelect');
        this.elements.startScanBtn = document.getElementById('startScanBtn');
        this.elements.stopScanBtn = document.getElementById('stopScanBtn');
        this.elements.customScanOptions = document.getElementById('customScanOptions');

        // Progress
        this.elements.progressContainer = document.getElementById('progressContainer');
        this.elements.progressBar = document.getElementById('progressBar');
        this.elements.progressText = document.getElementById('progressText');
        this.elements.currentTest = document.getElementById('currentTest');

        // Statistics
        this.elements.totalTargets = document.getElementById('totalTargets');
        this.elements.vulnerableTargets = document.getElementById('vulnerableTargets');
        this.elements.totalVulns = document.getElementById('totalVulns');
        this.elements.highSeverity = document.getElementById('highSeverity');

        // Content containers
        this.elements.vulnerabilitiesContainer = document.getElementById('vulnerabilitiesContainer');
        this.elements.requestsContainer = document.getElementById('requestsContainer');
        this.elements.evidenceContainer = document.getElementById('evidenceContainer');
        this.elements.targetsList = document.getElementById('targetsList');

        // Scan options
        this.elements.scanOptions = {
            sqlInjection: document.getElementById('sqlInjectionCheck'),
            xss: document.getElementById('xssCheck'),
            directoryTraversal: document.getElementById('directoryTraversalCheck'),
            authenticationBypass: document.getElementById('authBypassCheck'),
            csrf: document.getElementById('csrfCheck')
        };
    }

    initializeTabs() {
        const tabBtns = this.container.querySelectorAll('.tab-btn');
        const tabPanes = this.container.querySelectorAll('.tab-pane');

        tabBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const tabName = btn.dataset.tab;
                
                // Update button states - using email app style
                tabBtns.forEach(b => {
                    b.classList.remove('active', 'bg-green-400', 'text-black');
                    b.classList.add('text-gray-400', 'hover:text-white', 'hover:bg-gray-700');
                });
                btn.classList.add('active', 'bg-green-400', 'text-black');
                btn.classList.remove('text-gray-400', 'hover:text-white', 'hover:bg-gray-700');
                
                // Update pane visibility
                tabPanes.forEach(pane => pane.classList.add('hidden'));
                document.getElementById(tabName + 'Tab').classList.remove('hidden');
            });
        });
    }

    bindEvents() {
        // Scan type change handler
        this.elements.scanTypeSelect.addEventListener('change', (e) => {
            if (e.target.value === 'custom') {
                this.elements.customScanOptions.classList.remove('hidden');
            } else {
                this.elements.customScanOptions.classList.add('hidden');
            }
        });

        // Start scan button
        this.elements.startScanBtn.addEventListener('click', () => {
            this.startScan();
        });

        // Stop scan button
        this.elements.stopScanBtn.addEventListener('click', () => {
            this.stopScan();
        });
    }

    populateTargetList() {
        const targets = this.registry.getAllTargets();
        
        // Clear existing options
        this.elements.targetSelect.innerHTML = '<option value="">Select target...</option>';
        
        // Add targets to select
        targets.forEach(target => {
            const option = document.createElement('option');
            option.value = target.id;
            option.textContent = `${target.name} (${target.url})`;
            this.elements.targetSelect.appendChild(option);
        });

        // Update targets tab
        this.updateTargetsList();
    }

    updateTargetsList() {
        const targets = this.registry.getAllTargets();
        
        this.elements.targetsList.innerHTML = targets.map(target => `
            <div class="target-card bg-gray-800 border border-gray-600 p-3 rounded hover:bg-gray-700 transition-colors cursor-pointer">
                <div class="flex justify-between items-start">
                    <div>
                        <h4 class="font-medium text-white">${target.name}</h4>
                        <p class="text-sm text-gray-400">${target.url}</p>
                        <p class="text-xs text-gray-500">${target.description}</p>
                    </div>
                    <div class="text-right">
                        <span class="inline-block px-2 py-1 text-xs rounded ${this.getCriticalityColor(target.criticality)}">
                            ${target.criticality}
                        </span>
                        <div class="text-xs text-gray-400 mt-1">
                            ${target.vulnerabilities.length} vulnerabilities
                        </div>
                    </div>
                </div>
            </div>
        `).join('');
    }

    getCriticalityColor(criticality) {
        const colors = {
            'Critical': 'bg-red-100 text-red-800',
            'High': 'bg-orange-100 text-orange-800',
            'Medium': 'bg-yellow-100 text-yellow-800',
            'Low': 'bg-green-100 text-green-800'
        };
        return colors[criticality] || 'bg-gray-100 text-gray-800';
    }

    updateStatistics() {
        const stats = this.registry.getTargetStatistics();
        
        this.elements.totalTargets.textContent = stats.total;
        this.elements.vulnerableTargets.textContent = stats.vulnerableTargets;
        
        // Calculate total vulnerabilities and high severity count
        const targets = this.registry.getAllTargets();
        const totalVulns = targets.reduce((sum, target) => sum + target.vulnerabilities.length, 0);
        const highSeverity = targets.reduce((sum, target) => {
            return sum + target.vulnerabilities.filter(v => 
                v.severity === 'Critical' || v.severity === 'High'
            ).length;
        }, 0);
        
        this.elements.totalVulns.textContent = totalVulns;
        this.elements.highSeverity.textContent = highSeverity;
    }

    async startScan() {
        const targetId = this.elements.targetSelect.value;
        if (!targetId) {
            alert('Please select a target to scan');
            return;
        }

        const target = this.registry.getTarget(targetId);
        if (!target) {
            alert('Selected target not found');
            return;
        }

        const scanType = this.elements.scanTypeSelect.value;
        const scanOptions = this.getScanOptions(scanType);

        this.isScanning = true;
        this.updateScanControls();
        this.showProgress();

        try {
            this.currentScan = await this.scanner.startScan(target.url, scanOptions, {
                onProgress: (progress) => this.updateProgress(progress),
                onVulnerabilityFound: (vulnerability) => this.handleVulnerabilityFound(vulnerability),
                onRequestMade: (request) => this.handleRequestMade(request),
                onEvidenceCollected: (evidence) => this.handleEvidenceCollected(evidence)
            });

            await this.currentScan.waitForCompletion();
            this.handleScanComplete();
            
        } catch (error) {
            console.error('Scan failed:', error);
            this.handleScanError(error);
        }
    }

    stopScan() {
        if (this.currentScan) {
            this.currentScan.stop();
            this.handleScanStopped();
        }
    }

    getScanOptions(scanType) {
        if (scanType === 'custom') {
            return {
                sqlInjection: this.elements.scanOptions.sqlInjection.checked,
                xss: this.elements.scanOptions.xss.checked,
                directoryTraversal: this.elements.scanOptions.directoryTraversal.checked,
                authenticationBypass: this.elements.scanOptions.authenticationBypass.checked,
                csrf: this.elements.scanOptions.csrf.checked
            };
        } else if (scanType === 'quick') {
            return {
                sqlInjection: true,
                xss: true,
                directoryTraversal: false,
                authenticationBypass: true,
                csrf: false
            };
        } else {
            // Comprehensive scan
            return {
                sqlInjection: true,
                xss: true,
                directoryTraversal: true,
                authenticationBypass: true,
                csrf: true
            };
        }
    }

    updateScanControls() {
        this.elements.startScanBtn.disabled = this.isScanning;
        this.elements.stopScanBtn.disabled = !this.isScanning;
        this.elements.scannerStatus.textContent = this.isScanning ? 'Scanning in progress...' : 'Ready to scan';
    }

    showProgress() {
        this.elements.progressContainer.classList.remove('hidden');
        this.updateProgress(0);
    }

    hideProgress() {
        this.elements.progressContainer.classList.add('hidden');
    }

    updateProgress(progress) {
        this.elements.progressBar.style.width = `${progress}%`;
        this.elements.progressText.textContent = `${progress}%`;
    }

    handleVulnerabilityFound(vulnerability) {
        this.addVulnerabilityToUI(vulnerability);
        this.updateStatistics();
    }

    handleRequestMade(request) {
        this.addRequestToUI(request);
    }

    handleEvidenceCollected(evidence) {
        this.addEvidenceToUI(evidence);
    }

    handleScanComplete() {
        this.isScanning = false;
        this.updateScanControls();
        this.hideProgress();
        this.elements.scannerStatus.textContent = 'Scan completed successfully';
        
        // Update target registry with results
        const targetId = this.elements.targetSelect.value;
        const vulnerabilities = this.currentScan.getVulnerabilities();
        
        vulnerabilities.forEach(vuln => {
            this.registry.addVulnerabilityToTarget(targetId, vuln);
        });
        
        this.updateStatistics();
    }

    handleScanStopped() {
        this.isScanning = false;
        this.updateScanControls();
        this.hideProgress();
        this.elements.scannerStatus.textContent = 'Scan stopped by user';
    }

    handleScanError(error) {
        this.isScanning = false;
        this.updateScanControls();
        this.hideProgress();
        this.elements.scannerStatus.textContent = `Scan failed: ${error.message}`;
    }

    addVulnerabilityToUI(vulnerability) {
        if (this.elements.vulnerabilitiesContainer.querySelector('.text-center')) {
            this.elements.vulnerabilitiesContainer.innerHTML = '';
        }

        const vulnElement = document.createElement('div');
        vulnElement.className = 'vulnerability-card bg-gray-800 border border-gray-600 p-4 rounded-l-4 hover:bg-gray-700 transition-colors cursor-pointer ' + 
            this.getSeverityBorderColor(vulnerability.severity);
        
        vulnElement.innerHTML = `
            <div class="flex justify-between items-start mb-2">
                <h3 class="font-semibold text-white">${vulnerability.title}</h3>
                <span class="px-2 py-1 text-xs rounded ${this.getSeverityColor(vulnerability.severity)}">
                    ${vulnerability.severity}
                </span>
            </div>
            <p class="text-sm text-gray-300 mb-2">${vulnerability.description}</p>
            <div class="text-xs text-gray-400 space-y-1">
                <div><strong class="text-gray-300">Target:</strong> ${vulnerability.target}</div>
                <div><strong class="text-gray-300">Parameter:</strong> ${vulnerability.parameter}</div>
                <div><strong class="text-gray-300">CVSS Score:</strong> ${vulnerability.cvssScore}</div>
                <div><strong class="text-gray-300">Impact:</strong> ${vulnerability.impact}</div>
                <div><strong class="text-gray-300">Recommendation:</strong> ${vulnerability.recommendation}</div>
            </div>
        `;

        this.elements.vulnerabilitiesContainer.appendChild(vulnElement);
    }

    addRequestToUI(request) {
        if (this.elements.requestsContainer.querySelector('.text-center')) {
            this.elements.requestsContainer.innerHTML = '';
        }

        const requestElement = document.createElement('div');
        requestElement.className = 'request-card bg-gray-800 border border-gray-600 p-3 rounded mb-2 hover:bg-gray-700 transition-colors cursor-pointer';
        
        requestElement.innerHTML = `
            <div class="flex justify-between items-start mb-2">
                <span class="font-mono text-sm text-green-400">${request.method} ${request.url}</span>
                <span class="text-xs text-gray-500">${new Date(request.timestamp).toLocaleTimeString()}</span>
            </div>
            <div class="text-xs text-gray-400">
                <div><strong class="text-gray-300">Test:</strong> ${request.testName}</div>
                <div><strong class="text-gray-300">Payload:</strong> <code class="bg-gray-900 text-gray-300 px-1 rounded">${request.payload}</code></div>
            </div>
        `;

        this.elements.requestsContainer.appendChild(requestElement);
    }

    addEvidenceToUI(evidence) {
        if (this.elements.evidenceContainer.querySelector('.text-center')) {
            this.elements.evidenceContainer.innerHTML = '';
        }

        const evidenceElement = document.createElement('div');
        evidenceElement.className = 'evidence-card bg-gray-800 border border-gray-600 p-3 rounded mb-2 hover:bg-gray-700 transition-colors cursor-pointer';
        
        evidenceElement.innerHTML = `
            <div class="flex justify-between items-start mb-2">
                <h4 class="font-medium text-white">${evidence.title}</h4>
                <span class="text-xs text-gray-500">${new Date(evidence.timestamp).toLocaleTimeString()}</span>
            </div>
            <div class="text-sm space-y-1">
                <div><strong class="text-gray-300">Type:</strong> <span class="text-gray-400">${evidence.type}</span></div>
                <div><strong class="text-gray-300">URL:</strong> <code class="text-xs bg-gray-900 text-gray-300 px-1 rounded">${evidence.request.url}</code></div>
                <div><strong class="text-gray-300">Vulnerability ID:</strong> <code class="text-xs bg-gray-900 text-gray-300 px-1 rounded">${evidence.vulnerabilityId}</code></div>
            </div>
        `;

        this.elements.evidenceContainer.appendChild(evidenceElement);
    }

    getSeverityColor(severity) {
        const colors = {
            'Critical': 'bg-red-100 text-red-800',
            'High': 'bg-orange-100 text-orange-800',
            'Medium': 'bg-yellow-100 text-yellow-800',
            'Low': 'bg-green-100 text-green-800'
        };
        return colors[severity] || 'bg-gray-100 text-gray-800';
    }

    getSeverityBorderColor(severity) {
        const colors = {
            'Critical': 'border-red-500',
            'High': 'border-orange-500',
            'Medium': 'border-yellow-500',
            'Low': 'border-green-500'
        };
        return colors[severity] || 'border-gray-500';
    }

    refresh() {
        this.populateTargetList();
        this.updateStatistics();
    }

    destroy() {
        if (this.currentScan && this.isScanning) {
            this.currentScan.stop();
        }
    }
}
