import { VulnerabilityScannerUIRenderer } from './vulnerability-scanner-ui-renderer.js';
import { VulnerabilityScannerEventHandler } from './vulnerability-scanner-event-handler.js';
import { VulnerabilityScannerLogic } from './vulnerability-scanner-logic.js';
import { VulnerabilityScannerDataManager } from './vulnerability-scanner-data-manager.js';
import { VulnerabilityScannerTabManager } from './vulnerability-scanner-tab-manager.js';
import { VulnerabilityScannerNotificationManager } from './vulnerability-scanner-notification-manager.js';

export class VulnerabilityScannerUI {
    constructor(container, vulnerabilityScanner, webTargetRegistry) {
        this.container = container;
        this.scanner = vulnerabilityScanner;
        this.registry = webTargetRegistry;
        
        // Initialize modular components
        this.uiRenderer = new VulnerabilityScannerUIRenderer();
        this.notificationManager = new VulnerabilityScannerNotificationManager();
        this.tabManager = new VulnerabilityScannerTabManager(container);
        this.dataManager = new VulnerabilityScannerDataManager(webTargetRegistry, this.uiRenderer);
        this.scannerLogic = new VulnerabilityScannerLogic(vulnerabilityScanner, this.uiRenderer, this.dataManager, this.notificationManager);
        this.eventHandler = new VulnerabilityScannerEventHandler(
            this.uiRenderer, 
            this.scannerLogic, 
            this.dataManager, 
            this.tabManager, 
            this.notificationManager
        );
        
        // Legacy properties for backward compatibility
        this.currentScan = null;
        this.isScanning = false;
        this.elements = {};
        this.tabs = {};
        
        this.initializeUI();
        this.bindEvents();
    }

    initializeUI() {
        this.container.innerHTML = this.uiRenderer.createMainHTML();
        this.uiRenderer.cacheElements();
        
        // Update tab manager container reference after DOM creation
        this.tabManager.container = this.container;
        this.tabManager.bindTabEvents();
        this.tabManager.initializeDefaultState();
        
        this.dataManager.populateTargetList();
        this.dataManager.updateStatistics();
        
        // Set up legacy element references for backward compatibility
        this.elements = this.uiRenderer.elements;
    }

    bindEvents() {
        this.eventHandler.bindEvents();
        this.eventHandler.bindKeyboardShortcuts();
        
        // Listen for custom events
        this.container.addEventListener('tabSwitched', (e) => {
            this.handleTabSwitch(e.detail.tabName);
        });
    }

    handleTabSwitch(tabName) {
        // Handle any specific logic when tabs are switched
        // For example, refresh data for the active tab
        if (tabName === 'targets') {
            this.dataManager.updateTargetsList();
        }
    }

    // Legacy methods for backward compatibility
    populateTargetList() {
        this.dataManager.populateTargetList();
    }

    updateTargetsList() {
        this.dataManager.updateTargetsList();
    }

    updateStatistics() {
        this.dataManager.updateStatistics();
    }

    addCustomTarget() {
        this.eventHandler.handleAddTarget();
    }

    selectTarget(targetId) {
        return this.dataManager.selectTarget(targetId);
    }

    async startScan() {
        return this.scannerLogic.startScan();
    }

    stopScan() {
        this.scannerLogic.stopScan();
    }

    getScanOptions() {
        return this.scannerLogic.getScanOptions();
    }

    updateScanControls() {
        this.uiRenderer.updateScanControls(this.scannerLogic.isScanning);
    }

    showProgress() {
        this.uiRenderer.showProgress();
    }

    hideProgress() {
        this.uiRenderer.hideProgress();
    }

    updateProgress(progress) {
        this.uiRenderer.updateProgress(progress);
    }

    handleVulnerabilityFound(vulnerability) {
        this.uiRenderer.addVulnerabilityToUI(vulnerability);
        this.uiRenderer.updateCounters();
        this.dataManager.updateStatistics();
    }

    handleRequestMade(request) {
        this.uiRenderer.addRequestToUI(request);
        this.uiRenderer.updateCounters();
    }

    handleEvidenceCollected(evidence) {
        this.uiRenderer.addEvidenceToUI(evidence);
        this.uiRenderer.updateCounters();
    }

    handleScanComplete() {
        this.scannerLogic.handleScanComplete();
    }

    handleScanStopped() {
        this.scannerLogic.handleScanStopped();
    }

    handleScanError(error) {
        this.scannerLogic.handleScanError(error);
    }

    addVulnerabilityToUI(vulnerability) {
        this.uiRenderer.addVulnerabilityToUI(vulnerability);
    }

    addRequestToUI(request) {
        this.uiRenderer.addRequestToUI(request);
    }

    addEvidenceToUI(evidence) {
        this.uiRenderer.addEvidenceToUI(evidence);
    }

    updateCounters() {
        this.uiRenderer.updateCounters();
    }

    getSeverityColor(severity) {
        return this.uiRenderer.getSeverityColor(severity);
    }

    getSeverityBorderColor(severity) {
        return this.uiRenderer.getSeverityBorderColor(severity);
    }

    getCriticalityColor(criticality) {
        return this.uiRenderer.getCriticalityColor(criticality);
    }

    exportResults() {
        this.scannerLogic.exportResults();
    }

    showNotification(message, type = 'info') {
        this.notificationManager.show(message, type);
    }

    refresh() {
        this.dataManager.refresh();
    }

    destroy() {
        // Clean up all modular components
        this.scannerLogic.cleanup();
        this.eventHandler.destroy();
        this.tabManager.destroy();
        this.notificationManager.destroy();
    }

    // New methods to access modular components
    getDataManager() {
        return this.dataManager;
    }

    getScannerLogic() {
        return this.scannerLogic;
    }

    getTabManager() {
        return this.tabManager;
    }

    getNotificationManager() {
        return this.notificationManager;
    }

    getUIRenderer() {
        return this.uiRenderer;
    }

    // Advanced functionality using modular components
    exportAllData() {
        return this.dataManager.exportTargetData();
    }

    getVulnerabilityDistribution() {
        return this.dataManager.getVulnerabilityDistribution();
    }

    getMostVulnerableTargets(limit = 5) {
        return this.dataManager.getMostVulnerableTargets(limit);
    }

    switchTab(tabName) {
        this.tabManager.switchToTab(tabName);
    }

    highlightNewResults(tabName) {
        this.tabManager.highlightTab(tabName, true);
        setTimeout(() => {
            this.tabManager.highlightTab(tabName, false);
        }, 3000);
    }

    showAdvancedNotification(type, data) {
        switch (type) {
            case 'scan-started':
                return this.notificationManager.showScanStarted(data.targetName);
            case 'scan-completed':
                return this.notificationManager.showScanCompleted(data.vulnerabilityCount);
            case 'vulnerability-found':
                return this.notificationManager.showVulnerabilityFound(data.vulnerability);
            case 'target-added':
                return this.notificationManager.showTargetAdded(data.targetName);
            case 'export-completed':
                return this.notificationManager.showExportCompleted();
            default:
                return this.notificationManager.show(data.message, data.type || 'info');
        }
    }
}