// TODO: Update layout to manually add targets
// TODO: Add ability to test the discovered vulnerabilities against the target
// TODO: Add ability to document the vulnerabilities found in a report format
// TODO: Add the Ethical Dilemma Scenarios based on LEVEL4_IDEAS.md
// TODO: Check LEVEL4_IDEAS.md for any remaining tasks
// TODO: Create tutorial for the vulnerability scanner app
// TODO: Refactor web-target-registry.js into individual target files for each target

import { WindowBase } from '../window-base.js';
import { VulnerabilityScanner } from './vulnerability-scanner-functions/vulnerability-scanner.js';
import { webTargetRegistry } from './vulnerability-scanner-functions/web-target-registry.js';
import { VulnerabilityScannerUI } from './vulnerability-scanner-functions/vulnerability-scanner-ui.js';

export class VulnerabilityScannerApp extends WindowBase {
    constructor() {
        super('vulnerability-scanner', 'Web Vulnerability Scanner', {
            width: '85%',
            height: '80%',
            x: 100,
            y: 50
        });
        
        this.scanner = new VulnerabilityScanner();
        this.targetRegistry = webTargetRegistry;
        this.ui = null;
        this.currentScan = null;
        this.isScanning = false;
    }

    createContent() {
        return `<div id="vulnerability-scanner-container" class="h-full w-full"></div>`;
    }

    initialize() {
        super.initialize();
        
        // Get the content element from the window
        const contentElement = this.windowElement?.querySelector('.window-content');
        if (contentElement) {
            const container = contentElement.querySelector('#vulnerability-scanner-container');
            if (container) {
                this.ui = new VulnerabilityScannerUI(container, this.scanner, this.targetRegistry);
                this.loadDefaultTargets();
            } else {
                console.error('Could not find vulnerability scanner container');
            }
        } else {
            console.error('Could not find window content element for vulnerability scanner');
        }
    }

    bindEvents() {
        // The UI component handles all event binding
        // This method is here for any app-level events if needed
    }

    loadDefaultTargets() {
        // The target registry is already initialized with municipality targets
        // Just refresh the UI if it exists
        if (this.ui) {
            this.ui.refresh();
        }
    }

    async startVulnerabilityScan(selectedTarget, scanOptions) {
        // This method is now handled by the UI component
        // Kept for backward compatibility
        if (this.ui) {
            return this.ui.startScan();
        }
    }

    stopScan() {
        // This method is now handled by the UI component
        // Kept for backward compatibility
        if (this.ui) {
            this.ui.stopScan();
        }
    }

    exportResults() {
        // This method is now handled by the UI component
        // Kept for backward compatibility
        if (this.ui) {
            this.ui.exportResults();
        }
    }

    showNotification(message, type = 'info') {
        // This method is now handled by the UI component
        // Kept for backward compatibility
        if (this.ui) {
            this.ui.showNotification(message, type);
        } else {
            // Fallback notification
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 px-4 py-2 rounded-lg text-white text-sm z-50 ${
                type === 'success' ? 'bg-green-600' : 
                type === 'error' ? 'bg-red-600' : 
                type === 'warning' ? 'bg-yellow-600' : 'bg-blue-600'
            }`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 3000);
        }
    }
}
