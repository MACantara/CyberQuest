import { MalwareDatabase } from './malware-database.js';

export class ScanEngine {
    constructor(activityEmitter = null) {
        this.malwareDatabase = new MalwareDatabase();
        this.activityEmitter = activityEmitter;
        this.isScanning = false;
        this.scanProgress = 0;
        this.scanResults = [];
    }

    // Get predefined scan files for simulation
    getScanFiles() {
        return [
            'C:\\Windows\\System32\\kernel32.dll',
            'C:\\Program Files\\Common Files\\system.exe',
            'C:\\Users\\Public\\Downloads\\gaming_optimizer_pro.exe',
            'C:\\Temp\\steam_helper.exe',
            'C:\\Program Files\\Common Files\\performance_monitor.exe',
            'C:\\Windows\\System32\\system_optimizer.exe',
            'C:\\Users\\trainee\\AppData\\Roaming\\chrome.exe',
            'C:\\Program Files\\Microsoft Office\\office.exe'
        ];
    }

    // Start scan process
    async startScan(onProgressUpdate, onThreatDetected) {
        if (this.isScanning) return false;

        this.isScanning = true;
        this.scanProgress = 0;
        this.scanResults = [];

        // Emit scan start activity
        if (this.activityEmitter) {
            this.activityEmitter.emitScanStarted();
        }

        const scanFiles = this.getScanFiles();

        for (let i = 0; i < scanFiles.length; i++) {
            if (!this.isScanning) break;

            const file = scanFiles[i];
            this.scanProgress = Math.round(((i + 1) / scanFiles.length) * 100);

            // Update progress
            if (onProgressUpdate) {
                onProgressUpdate({
                    progress: this.scanProgress,
                    currentFile: file,
                    status: 'Scanning files...'
                });
            }

            // Check if file is malicious
            if (this.malwareDatabase.isMaliciousFile(file)) {
                const threat = this.malwareDatabase.createThreatResult(file);
                this.scanResults.push(threat);

                // Emit threat detected
                if (this.activityEmitter) {
                    this.activityEmitter.emitThreatDetected(threat);
                }

                // Notify callback
                if (onThreatDetected) {
                    onThreatDetected(threat);
                }
            }

            // Simulate scan time
            await new Promise(resolve => setTimeout(resolve, 1500));
        }

        this.isScanning = false;

        // Emit scan completed
        if (this.activityEmitter) {
            this.activityEmitter.emitScanCompleted(this.scanResults.length);
        }

        return this.scanResults;
    }

    // Stop scan
    stopScan() {
        this.isScanning = false;
    }

    // Get scan results
    getScanResults() {
        return this.scanResults;
    }

    // Get scan progress
    getScanProgress() {
        return {
            progress: this.scanProgress,
            isScanning: this.isScanning,
            threatsFound: this.scanResults.length
        };
    }

    // Get detailed analysis for a threat
    getDetailedAnalysis(threatId) {
        const threat = this.scanResults.find(t => t.id === threatId);
        if (threat) {
            return this.malwareDatabase.getDetailedAnalysis(threat.path);
        }
        return null;
    }

    // Get database statistics
    getDatabaseStats() {
        return this.malwareDatabase.getStatistics();
    }
}
