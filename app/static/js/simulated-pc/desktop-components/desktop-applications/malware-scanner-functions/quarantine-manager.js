export class QuarantineManager {
    constructor(activityEmitter = null) {
        this.quarantineItems = [];
        this.activityEmitter = activityEmitter;
    }

    // Add threat to quarantine
    quarantineThreat(threat) {
        const quarantineItem = {
            ...threat,
            quarantinedAt: new Date().toISOString(),
            quarantineId: Math.random().toString(36).substr(2, 12),
            status: 'quarantined'
        };

        this.quarantineItems.push(quarantineItem);

        // Emit quarantine activity
        if (this.activityEmitter) {
            this.activityEmitter.emitThreatQuarantined(threat);
        }

        return quarantineItem;
    }

    // Remove threat from quarantine (restore)
    restoreThreat(quarantineId) {
        const index = this.quarantineItems.findIndex(item => item.quarantineId === quarantineId);
        if (index !== -1) {
            const item = this.quarantineItems.splice(index, 1)[0];
            
            // Emit restore activity
            if (this.activityEmitter) {
                this.activityEmitter.emitThreatRestored(item);
            }
            
            return item;
        }
        return null;
    }

    // Permanently delete threat from quarantine
    deleteThreat(quarantineId) {
        const index = this.quarantineItems.findIndex(item => item.quarantineId === quarantineId);
        if (index !== -1) {
            const item = this.quarantineItems.splice(index, 1)[0];
            
            // Emit delete activity
            if (this.activityEmitter) {
                this.activityEmitter.emitThreatDeleted(item);
            }
            
            return item;
        }
        return null;
    }

    // Get all quarantined items
    getQuarantineItems() {
        return this.quarantineItems;
    }

    // Get quarantine statistics
    getQuarantineStats() {
        const typeCount = {};
        const riskCount = {};

        this.quarantineItems.forEach(item => {
            typeCount[item.type] = (typeCount[item.type] || 0) + 1;
            riskCount[item.riskLevel] = (riskCount[item.riskLevel] || 0) + 1;
        });

        return {
            total: this.quarantineItems.length,
            byType: typeCount,
            byRiskLevel: riskCount
        };
    }

    // Clear all quarantine items
    clearQuarantine() {
        const count = this.quarantineItems.length;
        this.quarantineItems = [];
        
        // Emit clear activity
        if (this.activityEmitter) {
            this.activityEmitter.emitQuarantineCleared(count);
        }
        
        return count;
    }

    // Check if quarantine is empty
    isEmpty() {
        return this.quarantineItems.length === 0;
    }
}
