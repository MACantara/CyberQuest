export class MalwareScannerEventHandler {
    constructor(app, scanEngine, quarantineManager, activityEmitter = null) {
        this.app = app;
        this.scanEngine = scanEngine;
        this.quarantineManager = quarantineManager;
        this.activityEmitter = activityEmitter;
    }

    bindEvents(windowElement) {
        if (!windowElement) return;

        // Start scan button
        const startBtn = windowElement.querySelector('#start-scan-btn');
        if (startBtn) {
            startBtn.addEventListener('click', () => {
                this.handleStartScan();
            });
        }

        // Stop scan button
        const stopBtn = windowElement.querySelector('#stop-scan-btn');
        if (stopBtn) {
            stopBtn.addEventListener('click', () => {
                this.handleStopScan();
            });
        }

        // Quarantine button
        const quarantineBtn = windowElement.querySelector('#quarantine-btn');
        if (quarantineBtn) {
            quarantineBtn.addEventListener('click', () => {
                this.handleShowQuarantine();
            });
        }

        // Update definitions button
        const updateBtn = windowElement.querySelector('#update-defs-btn');
        if (updateBtn) {
            updateBtn.addEventListener('click', () => {
                this.handleUpdateDefinitions();
            });
        }

        // Bind scan type radio buttons
        const scanTypeRadios = windowElement.querySelectorAll('input[name="scanType"]');
        scanTypeRadios.forEach(radio => {
            radio.addEventListener('change', (e) => {
                this.handleScanTypeChange(e.target.value);
            });
        });
    }

    async handleStartScan() {
        const selectedScanType = this.getSelectedScanType();
        
        await this.scanEngine.startScan(
            // Progress callback
            (progress) => {
                this.app.uiManager.updateScanProgress(progress);
            },
            // Threat detected callback
            (threat) => {
                this.app.uiManager.updateContent();
            }
        );

        this.app.uiManager.updateContent();
        this.app.uiManager.showScanComplete(this.scanEngine.getScanResults().length);
    }

    handleStopScan() {
        this.scanEngine.stopScan();
        this.app.uiManager.updateContent();
    }

    handleShowQuarantine() {
        const stats = this.quarantineManager.getQuarantineStats();
        this.app.uiManager.showQuarantine(stats);
    }

    handleUpdateDefinitions() {
        // Simulate definition update
        this.app.uiManager.showNotification('Virus definitions updated successfully', 'info');
        
        // Emit update activity
        if (this.activityEmitter) {
            this.activityEmitter.emitDefinitionsUpdated();
        }
    }

    handleScanTypeChange(scanType) {
        console.log(`Scan type changed to: ${scanType}`);
        
        // Emit scan type change activity
        if (this.activityEmitter) {
            this.activityEmitter.emitScanTypeChanged(scanType);
        }
    }

    handleQuarantineThreat(threatId) {
        const result = this.app.malwareActions.quarantineThreat(threatId);
        if (result.success) {
            this.app.uiManager.updateContent();
            this.app.uiManager.showNotification(result.message, 'success');
            this.app.uiManager.checkMalwareCleanupComplete();
        } else {
            this.app.uiManager.showNotification(result.message, 'error');
        }
    }

    handleDeleteThreat(threatId) {
        const result = this.app.malwareActions.deleteThreat(threatId);
        if (result.success) {
            this.app.uiManager.updateContent();
            this.app.uiManager.showNotification(result.message, 'success');
            this.app.uiManager.checkMalwareCleanupComplete();
        } else {
            this.app.uiManager.showNotification(result.message, 'error');
        }
    }

    getSelectedScanType() {
        const selectedRadio = document.querySelector('input[name="scanType"]:checked');
        return selectedRadio ? selectedRadio.value : 'quick';
    }

    // Set up global threat action handlers
    setupGlobalHandlers() {
        // Set up global handlers for threat actions
        window.malwareScannerApp = {
            quarantineThreat: (threatId) => this.handleQuarantineThreat(threatId),
            deleteThreat: (threatId) => this.handleDeleteThreat(threatId)
        };
    }

    cleanup() {
        // Clean up global handlers
        if (window.malwareScannerApp) {
            window.malwareScannerApp = null;
        }
    }
}
