import { WindowBase } from '../window-base.js';
import { MalwareScannerActivityEmitter } from './malware-scanner-functions/malware-scanner-activity-emitter.js';

export class MalwareScannerApp extends WindowBase {
    constructor() {
        super('malware-scanner', 'Malware Scanner', {
            width: '80%',
            height: '70%'
        });
        
        this.isScanning = false;
        this.scanProgress = 0;
        this.scanResults = [];
        this.quarantineItems = [];
        this.threatTypes = ['Trojan', 'Ransomware', 'Spyware', 'Rootkit', 'Adware'];
        
        // Set up activity emission system
        try {
            this.setupActivityEmission(MalwareScannerActivityEmitter);
        } catch (error) {
            console.warn('Failed to set up activity emission for malware scanner:', error.message);
            this.activityEmitter = null;
        }
    }

    createContent() {
        return `
            <div class="h-full flex flex-col bg-gray-900 text-white">
                <!-- Header -->
                <div class="bg-gray-800 p-4 border-b border-gray-700">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-3">
                            <div class="w-8 h-8 bg-red-600 rounded flex items-center justify-center">
                                <i class="bi bi-shield-exclamation text-white"></i>
                            </div>
                            <div>
                                <h2 class="text-lg font-semibold text-white">CyberQuest Malware Scanner</h2>
                                <p class="text-sm text-gray-400">Real-time threat detection and removal</p>
                            </div>
                        </div>
                        <div class="flex items-center space-x-2">
                            <div class="w-3 h-3 rounded-full ${this.isScanning ? 'bg-yellow-400 animate-pulse' : 'bg-green-400'}"></div>
                            <span class="text-sm text-gray-300">${this.isScanning ? 'Scanning...' : 'Ready'}</span>
                        </div>
                    </div>
                </div>

                <!-- Main Content -->
                <div class="flex-1 flex">
                    <!-- Left Panel - Scanner Controls -->
                    <div class="w-1/3 bg-gray-800 border-r border-gray-700 p-4">
                        <div class="space-y-4">
                            <!-- Scan Types -->
                            <div>
                                <h3 class="text-md font-semibold text-green-400 mb-3">Scan Options</h3>
                                <div class="space-y-2">
                                    <label class="flex items-center space-x-2 cursor-pointer">
                                        <input type="radio" name="scanType" value="quick" checked class="text-green-400">
                                        <span class="text-sm">Quick Scan (Recommended)</span>
                                    </label>
                                    <label class="flex items-center space-x-2 cursor-pointer">
                                        <input type="radio" name="scanType" value="full" class="text-green-400">
                                        <span class="text-sm">Full System Scan</span>
                                    </label>
                                    <label class="flex items-center space-x-2 cursor-pointer">
                                        <input type="radio" name="scanType" value="custom" class="text-green-400">
                                        <span class="text-sm">Custom Scan</span>
                                    </label>
                                </div>
                            </div>

                            <!-- Scan Controls -->
                            <div class="pt-4 border-t border-gray-700">
                                <button id="start-scan-btn" class="w-full py-3 px-4 bg-green-600 hover:bg-green-500 text-white rounded font-semibold transition-colors cursor-pointer ${this.isScanning ? 'opacity-50 cursor-not-allowed' : ''}" ${this.isScanning ? 'disabled' : ''}>
                                    <i class="bi bi-play-circle mr-2"></i>Start Scan
                                </button>
                                <button id="stop-scan-btn" class="w-full mt-2 py-2 px-4 bg-red-600 hover:bg-red-500 text-white rounded text-sm transition-colors cursor-pointer ${!this.isScanning ? 'opacity-50 cursor-not-allowed' : ''}" ${!this.isScanning ? 'disabled' : ''}>
                                    <i class="bi bi-stop-circle mr-2"></i>Stop Scan
                                </button>
                            </div>

                            <!-- Real-time Protection -->
                            <div class="pt-4 border-t border-gray-700">
                                <h3 class="text-md font-semibold text-green-400 mb-3">Protection Status</h3>
                                <div class="space-y-2">
                                    <div class="flex items-center justify-between">
                                        <span class="text-sm">Real-time Protection</span>
                                        <span class="text-green-400 text-sm">ON</span>
                                    </div>
                                    <div class="flex items-center justify-between">
                                        <span class="text-sm">Auto-quarantine</span>
                                        <span class="text-green-400 text-sm">ON</span>
                                    </div>
                                    <div class="flex items-center justify-between">
                                        <span class="text-sm">Cloud Protection</span>
                                        <span class="text-green-400 text-sm">ON</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Quick Actions -->
                            <div class="pt-4 border-t border-gray-700">
                                <h3 class="text-md font-semibold text-green-400 mb-3">Quick Actions</h3>
                                <div class="space-y-2">
                                    <button id="quarantine-btn" class="w-full py-2 px-3 bg-gray-700 hover:bg-gray-600 text-white rounded text-sm transition-colors cursor-pointer">
                                        <i class="bi bi-archive mr-2"></i>View Quarantine
                                    </button>
                                    <button id="update-defs-btn" class="w-full py-2 px-3 bg-gray-700 hover:bg-gray-600 text-white rounded text-sm transition-colors cursor-pointer">
                                        <i class="bi bi-download mr-2"></i>Update Definitions
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Right Panel - Scan Results -->
                    <div class="flex-1 p-4">
                        <div class="h-full flex flex-col">
                            <!-- Scan Progress -->
                            <div id="scan-progress-section" class="mb-4 ${this.isScanning ? '' : 'hidden'}">
                                <h3 class="text-md font-semibold text-green-400 mb-2">Scan Progress</h3>
                                <div class="bg-gray-700 rounded-full h-3 mb-2">
                                    <div id="progress-bar" class="bg-green-500 h-3 rounded-full transition-all duration-300" style="width: ${this.scanProgress}%"></div>
                                </div>
                                <div class="flex justify-between text-sm text-gray-400">
                                    <span id="scan-status">Initializing scan...</span>
                                    <span id="scan-percentage">${this.scanProgress}%</span>
                                </div>
                                <div class="mt-2 text-xs text-gray-500" id="current-file">Preparing...</div>
                            </div>

                            <!-- Scan Results -->
                            <div class="flex-1">
                                <div class="flex items-center justify-between mb-3">
                                    <h3 class="text-md font-semibold text-green-400">Scan Results</h3>
                                    <div class="text-sm text-gray-400">
                                        <span id="threats-found">${this.scanResults.length}</span> threats detected
                                    </div>
                                </div>
                                
                                <div id="results-container" class="bg-gray-800 rounded border border-gray-700 h-full overflow-y-auto">
                                    ${this.renderScanResults()}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Status Bar -->
                <div class="bg-gray-800 p-3 border-t border-gray-700 flex items-center justify-between text-sm">
                    <div class="flex items-center space-x-4">
                        <span class="text-gray-400">Last scan: Never</span>
                        <span class="text-gray-400">Definitions: Up to date</span>
                    </div>
                    <div class="flex items-center space-x-2">
                        <div class="w-2 h-2 rounded-full bg-green-400"></div>
                        <span class="text-gray-400">System protected</span>
                    </div>
                </div>
            </div>
        `;
    }

    renderScanResults() {
        if (this.scanResults.length === 0) {
            return `
                <div class="flex items-center justify-center h-full text-gray-500">
                    <div class="text-center">
                        <i class="bi bi-shield-check text-4xl mb-2"></i>
                        <p>No threats detected</p>
                        <p class="text-sm">Your system appears to be clean</p>
                    </div>
                </div>
            `;
        }

        return this.scanResults.map(result => `
            <div class="p-3 border-b border-gray-700 hover:bg-gray-750 transition-colors">
                <div class="flex items-center justify-between">
                    <div class="flex-1">
                        <div class="flex items-center space-x-2">
                            <i class="bi bi-exclamation-triangle text-red-400"></i>
                            <span class="font-medium text-red-400">${result.name}</span>
                            <span class="text-xs bg-red-600 text-white px-2 py-1 rounded">${result.type}</span>
                        </div>
                        <div class="text-sm text-gray-400 mt-1">${result.path}</div>
                        <div class="text-xs text-gray-500 mt-1">Risk Level: ${result.riskLevel} | Size: ${result.size}</div>
                    </div>
                    <div class="flex space-x-2">
                        <button class="px-3 py-1 bg-yellow-600 hover:bg-yellow-500 text-white rounded text-xs cursor-pointer" onclick="window.malwareScannerApp.quarantineThreat('${result.id}')">
                            Quarantine
                        </button>
                        <button class="px-3 py-1 bg-red-600 hover:bg-red-500 text-white rounded text-xs cursor-pointer" onclick="window.malwareScannerApp.deleteThreat('${result.id}')">
                            Delete
                        </button>
                    </div>
                </div>
            </div>
        `).join('');
    }

    bindEvents() {
        const windowElement = this.windowElement;
        if (!windowElement) return;

        // Start scan button
        const startBtn = windowElement.querySelector('#start-scan-btn');
        if (startBtn) {
            startBtn.addEventListener('click', () => {
                this.startScan();
            });
        }

        // Stop scan button
        const stopBtn = windowElement.querySelector('#stop-scan-btn');
        if (stopBtn) {
            stopBtn.addEventListener('click', () => {
                this.stopScan();
            });
        }

        // Quarantine button
        const quarantineBtn = windowElement.querySelector('#quarantine-btn');
        if (quarantineBtn) {
            quarantineBtn.addEventListener('click', () => {
                this.showQuarantine();
            });
        }

        // Update definitions button
        const updateBtn = windowElement.querySelector('#update-defs-btn');
        if (updateBtn) {
            updateBtn.addEventListener('click', () => {
                this.updateDefinitions();
            });
        }
    }

    async startScan() {
        if (this.isScanning) return;

        this.isScanning = true;
        this.scanProgress = 0;
        this.scanResults = [];
        
        // Emit scan start activity
        if (this.activityEmitter) {
            this.activityEmitter.emitScanStarted();
        }

        this.updateContent();

        // Simulate scan progress
        const scanFiles = [
            'C:\\Windows\\System32\\kernel32.dll',
            'C:\\Program Files\\Common Files\\system.exe',
            'C:\\Users\\Public\\Downloads\\gaming_optimizer_pro.exe',
            'C:\\Temp\\steam_helper.exe',
            'C:\\Program Files\\Common Files\\performance_monitor.exe',
            'C:\\Windows\\System32\\system_optimizer.exe',
            'C:\\Users\\trainee\\AppData\\Roaming\\chrome.exe',
            'C:\\Program Files\\Microsoft Office\\office.exe'
        ];

        for (let i = 0; i < scanFiles.length; i++) {
            if (!this.isScanning) break;

            const file = scanFiles[i];
            this.scanProgress = Math.round(((i + 1) / scanFiles.length) * 100);
            
            // Update scan status
            const statusElement = this.windowElement?.querySelector('#scan-status');
            const percentageElement = this.windowElement?.querySelector('#scan-percentage');
            const fileElement = this.windowElement?.querySelector('#current-file');
            const progressBar = this.windowElement?.querySelector('#progress-bar');
            
            if (statusElement) statusElement.textContent = 'Scanning files...';
            if (percentageElement) percentageElement.textContent = `${this.scanProgress}%`;
            if (fileElement) fileElement.textContent = `Scanning: ${file}`;
            if (progressBar) progressBar.style.width = `${this.scanProgress}%`;

            // Check if file is malicious (based on our known malware files)
            if (this.isMaliciousFile(file)) {
                this.scanResults.push(this.createThreatResult(file));
                
                // Emit threat detected
                if (this.activityEmitter) {
                    this.activityEmitter.emitThreatDetected(this.scanResults[this.scanResults.length - 1]);
                }
            }

            await new Promise(resolve => setTimeout(resolve, 1500));
        }

        this.isScanning = false;
        
        // Emit scan completed
        if (this.activityEmitter) {
            this.activityEmitter.emitScanCompleted(this.scanResults.length);
        }

        this.updateContent();
        this.showScanComplete();
    }

    stopScan() {
        this.isScanning = false;
        this.updateContent();
    }

    isMaliciousFile(filePath) {
        const maliciousFiles = [
            'gaming_optimizer_pro.exe',
            'steam_helper.exe',
            'performance_monitor.exe',
            'system_optimizer.exe'
        ];
        
        return maliciousFiles.some(malware => filePath.includes(malware));
    }

    createThreatResult(filePath) {
        const threats = {
            'gaming_optimizer_pro.exe': {
                name: 'Gaming Optimizer Pro',
                type: 'Ransomware',
                riskLevel: 'Critical',
                size: '2.4 MB'
            },
            'steam_helper.exe': {
                name: 'Fake Steam Helper',
                type: 'Trojan',
                riskLevel: 'High',
                size: '1.8 MB'
            },
            'performance_monitor.exe': {
                name: 'Performance Monitor Spyware',
                type: 'Spyware',
                riskLevel: 'Medium',
                size: '1.2 MB'
            },
            'system_optimizer.exe': {
                name: 'System Optimizer Rootkit',
                type: 'Rootkit',
                riskLevel: 'Critical',
                size: '3.1 MB'
            }
        };

        const fileName = filePath.split('\\').pop();
        const threat = threats[fileName] || {
            name: fileName,
            type: 'Unknown',
            riskLevel: 'Medium',
            size: '1.0 MB'
        };

        return {
            id: Math.random().toString(36).substr(2, 9),
            ...threat,
            path: filePath,
            detected: new Date().toLocaleString()
        };
    }

    quarantineThreat(threatId) {
        const threat = this.scanResults.find(t => t.id === threatId);
        if (threat) {
            this.quarantineItems.push(threat);
            this.scanResults = this.scanResults.filter(t => t.id !== threatId);
            
            if (this.activityEmitter) {
                this.activityEmitter.emitThreatQuarantined(threat);
            }
            
            this.updateContent();
            this.showNotification(`${threat.name} quarantined successfully`, 'success');
        }
    }

    deleteThreat(threatId) {
        const threat = this.scanResults.find(t => t.id === threatId);
        if (threat && confirm(`Are you sure you want to permanently delete ${threat.name}?`)) {
            this.scanResults = this.scanResults.filter(t => t.id !== threatId);
            
            if (this.activityEmitter) {
                this.activityEmitter.emitThreatDeleted(threat);
            }
            
            this.updateContent();
            this.showNotification(`${threat.name} deleted successfully`, 'success');
        }
    }

    showQuarantine() {
        alert(`Quarantine contains ${this.quarantineItems.length} items`);
    }

    updateDefinitions() {
        this.showNotification('Virus definitions updated successfully', 'info');
    }

    showScanComplete() {
        const message = this.scanResults.length > 0 
            ? `Scan complete! ${this.scanResults.length} threats detected.`
            : 'Scan complete! No threats detected.';
        
        this.showNotification(message, this.scanResults.length > 0 ? 'warning' : 'success');
    }

    showNotification(message, type = 'info') {
        // Simple notification system
        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 p-4 rounded shadow-lg z-50 ${
            type === 'success' ? 'bg-green-600' : 
            type === 'warning' ? 'bg-yellow-600' : 
            type === 'error' ? 'bg-red-600' : 'bg-blue-600'
        } text-white`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    initialize() {
        super.initialize();
        this.bindEvents();
        
        // Set global reference for button handlers
        window.malwareScannerApp = this;
        
        // Mark app as opened
        localStorage.setItem('cyberquest_malwarescanner_opened', 'true');
        
        // Trigger tutorial if not completed
        setTimeout(() => {
            this.checkAndStartTutorial();
        }, 1000);
    }

    async checkAndStartTutorial() {
        try {
            if (window.tutorialManager && window.tutorialManager.shouldAutoStartMalwareScanner) {
                const shouldStart = await window.tutorialManager.shouldAutoStartMalwareScanner();
                if (shouldStart) {
                    console.log('Auto-starting Malware Scanner tutorial...');
                    await window.tutorialManager.startMalwareScannerTutorial();
                }
            }
        } catch (error) {
            console.error('Failed to check/start Malware Scanner tutorial:', error);
        }
    }

    cleanup() {
        this.stopScan();
        if (window.malwareScannerApp === this) {
            window.malwareScannerApp = null;
        }
        super.cleanup();
    }
}
