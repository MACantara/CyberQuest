/**
 * Web Targets Index
 * Central index for all target groups and individual targets
 */

export { WebTarget } from './web-target-base.js';

// Municipality voting system targets
export * from './municipality-voting/index.js';

/**
 * Registry of all available target groups
 */
export const TARGET_GROUPS = {
    'municipality-voting': () => import('./municipality-voting/index.js')
};

/**
 * Get all available target groups
 * @returns {Array} Array of group IDs
 */
export function getAvailableTargetGroups() {
    return Object.keys(TARGET_GROUPS);
}

/**
 * Load targets from a specific group
 * @param {string} groupId - Group ID to load
 * @returns {Promise<Array>} Promise resolving to array of targets
 */
export async function loadTargetGroup(groupId) {
    if (!TARGET_GROUPS[groupId]) {
        throw new Error(`Target group '${groupId}' not found`);
    }
    
    const group = await TARGET_GROUPS[groupId]();
    
    switch (groupId) {
        case 'municipality-voting':
            return group.getAllMunicipalityVotingTargets();
        default:
            throw new Error(`No loader defined for group '${groupId}'`);
    }
}

/**
 * Load a specific target by ID
 * @param {string} targetId - Target ID to load
 * @returns {Promise<WebTarget|null>} Promise resolving to target or null
 */
export async function loadTargetById(targetId) {
    // Try municipality voting targets first
    try {
        const municipalityGroup = await import('./municipality-voting/index.js');
        const target = municipalityGroup.getMunicipalityVotingTargetById(targetId);
        if (target) return target;
    } catch (error) {
        console.warn(`Failed to load from municipality voting group: ${error.message}`);
    }
    
    // Add more target groups here as they're created
    
    return null;
}

/**
 * Get all target group configurations
 * @returns {Promise<Array>} Promise resolving to array of group configs
 */
export async function getAllTargetGroupConfigs() {
    const configs = [];
    
    try {
        const municipalityGroup = await import('./municipality-voting/index.js');
        configs.push(municipalityGroup.getMunicipalityVotingGroupConfig());
    } catch (error) {
        console.warn(`Failed to load municipality voting group config: ${error.message}`);
    }
    
    // Add more target groups here as they're created
    
    return configs;
}
