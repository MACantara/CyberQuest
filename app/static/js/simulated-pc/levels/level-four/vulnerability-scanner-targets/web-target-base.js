/**
 * Base WebTarget class for vulnerability scanner targets
 * Provides common functionality for all web targets
 */
export class WebTarget {
    constructor(data) {
        this.id = data.id;
        this.name = data.name;
        this.url = data.url;
        this.description = data.description || '';
        this.type = data.type || 'web_application';
        this.technology = data.technology || 'Unknown';
        this.criticality = data.criticality || 'Medium';
        this.status = data.status || 'Unknown';
        this.lastScanned = data.lastScanned || null;
        this.vulnerabilities = data.vulnerabilities || [];
        this.endpoints = data.endpoints || [];
        this.forms = data.forms || [];
        this.headers = data.headers || {};
        this.cookies = data.cookies || [];
        this.created = data.created || new Date().toISOString();
        this.lastUpdated = data.lastUpdated || new Date().toISOString();
    }

    addEndpoint(endpoint) {
        if (!this.endpoints.includes(endpoint)) {
            this.endpoints.push(endpoint);
        }
    }

    removeEndpoint(endpoint) {
        this.endpoints = this.endpoints.filter(ep => ep !== endpoint);
    }

    addForm(form) {
        this.forms.push(form);
    }

    getFullUrl(endpoint = '') {
        return `${this.url}${endpoint}`;
    }

    hasEndpoint(endpoint) {
        return this.endpoints.includes(endpoint);
    }

    getVulnerabilityCount() {
        return this.vulnerabilities.length;
    }

    getHighestSeverityVulnerability() {
        if (this.vulnerabilities.length === 0) return null;
        
        const severityOrder = ['Critical', 'High', 'Medium', 'Low'];
        
        return this.vulnerabilities.reduce((highest, vuln) => {
            if (!highest) return vuln;
            
            const currentIndex = severityOrder.indexOf(vuln.severity);
            const highestIndex = severityOrder.indexOf(highest.severity);
            
            return currentIndex < highestIndex ? vuln : highest;
        });
    }

    getSeverityDistribution() {
        return this.vulnerabilities.reduce((acc, vuln) => {
            acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;
            return acc;
        }, {});
    }

    isActive() {
        return this.status === 'Active';
    }

    isCritical() {
        return this.criticality === 'Critical';
    }

    getAge() {
        return Date.now() - new Date(this.created).getTime();
    }

    getTimeSinceLastScan() {
        if (!this.lastScanned) return null;
        return Date.now() - new Date(this.lastScanned).getTime();
    }

    getRiskLevel() {
        const vulnCount = this.getVulnerabilityCount();
        const highestSeverity = this.getHighestSeverityVulnerability();
        
        if (!highestSeverity) return 'Low';
        
        const severity = highestSeverity.severity;
        if (severity === 'Critical' || vulnCount >= 10) return 'Critical';
        if (severity === 'High' || vulnCount >= 5) return 'High';
        if (severity === 'Medium' || vulnCount >= 2) return 'Medium';
        return 'Low';
    }

    toJSON() {
        return {
            id: this.id,
            name: this.name,
            url: this.url,
            description: this.description,
            type: this.type,
            technology: this.technology,
            criticality: this.criticality,
            status: this.status,
            lastScanned: this.lastScanned,
            vulnerabilities: this.vulnerabilities,
            endpoints: this.endpoints,
            forms: this.forms,
            headers: this.headers,
            cookies: this.cookies,
            created: this.created,
            lastUpdated: this.lastUpdated
        };
    }
}
