import { createVotePortalTarget } from './vote-portal-target.js';
import { createVoteDatabaseTarget } from './vote-database-target.js';
import { createVoteAdminTarget } from './vote-admin-target.js';
import { createVoteApiTarget } from './vote-api-target.js';

/**
 * Municipality Voting System Target Group
 * Contains all targets related to the municipal voting system
 */
export class MunicipalityVotingGroup {
    constructor() {
        this.id = 'municipality-voting';
        this.name = 'Municipality Voting System';
        this.description = 'Complete municipality voting system including portal, database, admin panel, and API';
        this.category = 'government';
        this.priority = 'critical';
        this.created = new Date().toISOString();
    }

    /**
     * Get all targets in this group
     * @returns {Array} Array of WebTarget instances
     */
    getTargets() {
        return [
            createVotePortalTarget(),
            createVoteDatabaseTarget(),
            createVoteAdminTarget(),
            createVoteApiTarget()
        ];
    }

    /**
     * Get target IDs in this group
     * @returns {Array} Array of target IDs
     */
    getTargetIds() {
        return [
            'vote-portal',
            'vote-database',
            'vote-admin',
            'vote-api'
        ];
    }

    /**
     * Get group metadata
     * @returns {Object} Group configuration object
     */
    getGroupConfig() {
        return {
            id: this.id,
            name: this.name,
            description: this.description,
            category: this.category,
            priority: this.priority,
            targetIds: this.getTargetIds(),
            created: this.created
        };
    }

    /**
     * Get targets by type
     * @param {string} type - Target type to filter by
     * @returns {Array} Filtered targets
     */
    getTargetsByType(type) {
        return this.getTargets().filter(target => target.type === type);
    }

    /**
     * Get targets by criticality
     * @param {string} criticality - Criticality level to filter by
     * @returns {Array} Filtered targets
     */
    getTargetsByCriticality(criticality) {
        return this.getTargets().filter(target => target.criticality === criticality);
    }

    /**
     * Get group statistics
     * @returns {Object} Statistics object
     */
    getStatistics() {
        const targets = this.getTargets();
        
        return {
            totalTargets: targets.length,
            byType: this.groupBy(targets, 'type'),
            byCriticality: this.groupBy(targets, 'criticality'),
            byStatus: this.groupBy(targets, 'status')
        };
    }

    /**
     * Helper method to group array by property
     * @param {Array} array - Array to group
     * @param {string} property - Property to group by
     * @returns {Object} Grouped object
     */
    groupBy(array, property) {
        return array.reduce((acc, item) => {
            const key = item[property];
            acc[key] = (acc[key] || 0) + 1;
            return acc;
        }, {});
    }
}

// Export singleton instance
export const municipalityVotingGroup = new MunicipalityVotingGroup();
