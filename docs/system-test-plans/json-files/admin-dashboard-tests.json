[
  {
    "test_plan_no": "STP-015-01",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.1: Admin Dashboard Main Layout",
    "description": "Verify that the Admin Dashboard page loads correctly when accessing /admin/ with authenticated admin user",
    "scenario": "Admin user navigates to the admin dashboard to view system statistics and manage users",
    "expected_results": "Display the complete admin dashboard with stats cards, recent users, login activity, and quick actions",
    "procedure": "1. Login with admin user credentials (is_admin=True)\n2. Navigate to http://localhost:5000/admin/\n3. Verify page loads completely\n4. Check page title displays 'Admin Dashboard'\n5. Verify dashboard header with title and management buttons\n6. Check all dashboard components are visible and properly styled\n7. Verify responsive layout and gradient background",
    "test_status": "pending",
    "priority": "critical",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-015-02",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.2: Admin Authentication Requirements",
    "description": "Verify admin dashboard requires proper admin authentication and redirects non-admin users",
    "scenario": "Non-admin user or unauthenticated user attempts to access admin dashboard",
    "expected_results": "Redirect non-admin users to home page with access denied message",
    "procedure": "1. Ensure user is logged out\n2. Navigate to http://localhost:5000/admin/\n3. Verify redirect to login page\n4. Login with regular user credentials (is_admin=False)\n5. Navigate to admin dashboard\n6. Verify 'Access denied. Admin privileges required.' message\n7. Check redirect to home page\n8. Test admin_required decorator functionality",
    "test_status": "pending",
    "priority": "critical",
    "category": "security"
  },
  {
    "test_plan_no": "STP-015-03",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.3: Stats Cards Overview",
    "description": "Verify statistics cards display correct user and system metrics",
    "scenario": "Admin views overview statistics including total users, new registrations, login attempts, and email verifications",
    "expected_results": "Display four responsive stat cards with accurate data from database models",
    "procedure": "1. Navigate to admin dashboard with admin credentials\n2. Verify Total Users card shows User.count_all() value\n3. Check active/inactive user breakdown display\n4. Verify Recent Registrations card shows User.count_recent_registrations(30)\n5. Check Login Attempts card shows LoginAttempt.count_recent_attempts(24)\n6. Verify failed login attempts count display\n7. Check Email Verifications card shows EmailVerification.count_verified_emails()\n8. Verify pending verifications count\n9. Test card responsive layout (grid-cols-1 sm:grid-cols-2 lg:grid-cols-4)",
    "test_status": "pending",
    "priority": "high",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-015-04",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.4: Dashboard Header Component",
    "description": "Verify admin dashboard header displays correctly with navigation buttons",
    "scenario": "Admin views dashboard header with title and quick access management buttons",
    "expected_results": "Display header with admin dashboard title and four management navigation buttons",
    "procedure": "1. Navigate to admin dashboard page\n2. Verify 'Admin Dashboard' heading is displayed\n3. Check subtitle 'Manage users and monitor system activity'\n4. Verify Player Analytics button links to data_analytics.player_analytics\n5. Check System Tests button links to system_test.dashboard\n6. Verify Manage Users button links to admin.users\n7. Check View Logs button links to admin_logs.logs_management\n8. Test responsive header layout (flex-col sm:flex-row)\n9. Verify button styling and hover effects",
    "test_status": "pending",
    "priority": "medium",
    "category": "ui"
  },
  {
    "test_plan_no": "STP-015-05",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.5: Recent Users Component",
    "description": "Verify recent users section displays latest user registrations correctly",
    "scenario": "Admin views recent users list with user details and status indicators",
    "expected_results": "Display recent users with avatars, usernames, emails, registration dates, and status badges",
    "procedure": "1. Navigate to admin dashboard page\n2. Verify 'Recent Users' section is displayed\n3. Check 'View all' link points to admin.users page\n4. Verify recent users list shows User.get_all_users(page=1, per_page=5)\n5. Check each user displays username initial avatar\n6. Verify username and email are shown with truncation\n7. Check registration date format (MM/DD/YYYY)\n8. Verify Active/Inactive status badges with proper colors\n9. Check Admin badge display for admin users\n10. Test responsive layout and text truncation",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-015-06",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.6: Login Activity Component",
    "description": "Verify recent login activity section displays login attempts with status",
    "scenario": "Admin views recent login activity to monitor system security",
    "expected_results": "Display recent login attempts with success/failure indicators and user details",
    "procedure": "1. Navigate to admin dashboard page\n2. Verify 'Recent Login Activity' section is displayed\n3. Check 'View all logs' link points to admin_logs.logs_management\n4. Verify login attempts show LoginAttempt.get_recent_attempts(10)\n5. Check success/failure icons (bi-check-circle/bi-x-circle)\n6. Verify username/email display with 'Unknown' fallback\n7. Check IP address display for each attempt\n8. Verify timestamp format (MM/DD HH:MM)\n9. Check Success/Failed status badges with appropriate colors\n10. Test responsive layout and color coding",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-015-07",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.7: Quick Actions Component",
    "description": "Verify quick actions panel provides admin management shortcuts",
    "scenario": "Admin uses quick actions to access system management functions",
    "expected_results": "Display four quick action buttons for common admin tasks",
    "procedure": "1. Navigate to admin dashboard page\n2. Verify 'Quick Actions' section is displayed\n3. Check System Backup button links to system_backup.backup_management\n4. Verify Cleanup Old Logs button submits POST to admin.cleanup_logs\n5. Check View Inactive Users links to admin.users with status=inactive filter\n6. Verify Pending Verifications links to admin_logs.logs_management with type=email_verifications\n7. Test button styling and hover effects\n8. Check responsive grid layout (grid-cols-1 sm:grid-cols-2 lg:grid-cols-4)\n9. Verify icon display and button truncation\n10. Test form submission for cleanup action",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-015-08",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.8: Database Integration",
    "description": "Verify dashboard integrates correctly with database models for statistics",
    "scenario": "Dashboard retrieves and displays real data from User, LoginAttempt, EmailVerification, and Contact models",
    "expected_results": "All dashboard statistics reflect actual database data through proper model integration",
    "procedure": "1. Verify User.count_all() integration for total users\n2. Check User.count_active() for active users count\n3. Test User.count_recent_registrations(30) for new users\n4. Verify LoginAttempt.count_recent_attempts(24) integration\n5. Check LoginAttempt.count_failed_attempts(24) for failed attempts\n6. Test EmailVerification.count_verified_emails() integration\n7. Verify EmailVerification.count_pending_verifications() count\n8. Check Contact.count_recent_submissions(30) integration\n9. Test error handling for DatabaseError exceptions\n10. Verify proper data refresh on page reload",
    "test_status": "pending",
    "priority": "critical",
    "category": "integration"
  },
  {
    "test_plan_no": "STP-015-09",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.9: Database Disabled Handling",
    "description": "Verify proper handling when database is disabled (Vercel environment)",
    "scenario": "Admin attempts to access dashboard in deployment environment with disabled database",
    "expected_results": "Display warning message about admin panel unavailability and redirect to home",
    "procedure": "1. Set DISABLE_DATABASE config to True\n2. Navigate to /admin/ page with admin credentials\n3. Verify warning message 'Admin panel is not available in this deployment environment.'\n4. Check redirect to home page\n5. Verify no admin dashboard content is displayed\n6. Test admin_required decorator behavior with disabled database\n7. Check no database operations are attempted\n8. Verify graceful fallback behavior",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-015-10",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.10: JavaScript Dashboard Functionality",
    "description": "Verify admin.js provides proper dashboard interaction and animations",
    "scenario": "Admin dashboard loads with JavaScript enhancements for better user experience",
    "expected_results": "JavaScript components initialize correctly with animations and interactions",
    "procedure": "1. Navigate to admin dashboard page\n2. Verify admin.js module loads successfully\n3. Check dropdownManager.init() executes without errors\n4. Test dashboard animation sequence (0.1s to 0.4s delays)\n5. Verify confirmation dialogs for destructive actions\n6. Check tab switching functionality initialization\n7. Test admin pagination helper functions\n8. Verify admin alert system functionality\n9. Check AJAX request handling for admin operations\n10. Test console for JavaScript errors",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-015-11",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.11: Cleanup Logs Functionality",
    "description": "Verify cleanup logs action works correctly with confirmation",
    "scenario": "Admin initiates cleanup of old logs and expired tokens through quick actions",
    "expected_results": "Cleanup operation executes with confirmation dialog and success feedback",
    "procedure": "1. Navigate to admin dashboard page\n2. Locate 'Cleanup Old Logs' button in quick actions\n3. Click cleanup button\n4. Verify confirmation dialog appears (if JavaScript enabled)\n5. Confirm cleanup action\n6. Check POST request to admin.cleanup_logs route\n7. Verify cleanup operation executes properly\n8. Check success or error message display\n9. Test return to dashboard after cleanup\n10. Verify database cleanup actually occurred",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-015-12",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.12: Error Handling and Resilience",
    "description": "Verify dashboard handles errors gracefully when data cannot be loaded",
    "scenario": "Dashboard encounters database errors or connection issues",
    "expected_results": "Graceful error handling with appropriate user feedback and logging",
    "procedure": "1. Simulate database connection issues\n2. Navigate to admin dashboard page\n3. Verify DatabaseError exception handling\n4. Check error message 'Error loading dashboard data.'\n5. Verify redirect to home page on database error\n6. Test logging of database errors\n7. Check partial data load scenarios\n8. Verify fallback displays for missing data\n9. Test system recovery when database is restored\n10. Check admin panel graceful degradation",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-015-13",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.13: Animation Sequence",
    "description": "Verify dashboard components animate correctly on page load",
    "scenario": "Admin observes dashboard sections appearing with staggered animations",
    "expected_results": "Dashboard components appear in sequence with proper fade-in animations",
    "procedure": "1. Clear browser cache and navigate to admin dashboard\n2. Observe animation sequence on page load\n3. Verify header animates first (animate-fade-in-up)\n4. Check stats cards animate with 0.1s delay\n5. Verify recent users animate with 0.2s delay (animate-fade-in-left)\n6. Check login activity animates with 0.3s delay (animate-fade-in-right)\n7. Verify quick actions animate with 0.4s delay\n8. Test animation performance and smoothness\n9. Check animations work across different browsers\n10. Verify no animation conflicts or glitches",
    "test_status": "pending",
    "priority": "low",
    "category": "ui"
  },
  {
    "test_plan_no": "STP-015-14",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.14: Responsive Design",
    "description": "Verify admin dashboard is responsive across different screen sizes",
    "scenario": "Admin accesses dashboard on mobile, tablet, and desktop devices",
    "expected_results": "Dashboard adapts properly to different screen sizes while maintaining functionality",
    "procedure": "1. Navigate to admin dashboard on desktop (1920x1080)\n2. Verify max-width constraint (max-w-7xl) and grid layouts\n3. Resize browser to tablet size (768px width)\n4. Check stats grid changes (grid-cols-1 sm:grid-cols-2 lg:grid-cols-4)\n5. Verify header layout adapts (flex-col sm:flex-row)\n6. Resize to mobile size (375px width)\n7. Check content grid adapts (grid-cols-1 xl:grid-cols-2)\n8. Test quick actions grid responsiveness\n9. Verify text scaling and button sizing\n10. Test landscape and portrait orientations",
    "test_status": "pending",
    "priority": "high",
    "category": "ui"
  },
  {
    "test_plan_no": "STP-015-15",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.15: Dark Mode Compatibility",
    "description": "Verify admin dashboard displays correctly in dark mode",
    "scenario": "Admin toggles dark mode and uses dashboard interface",
    "expected_results": "All elements display properly with dark theme colors and proper contrast",
    "procedure": "1. Navigate to admin dashboard page\n2. Toggle dark mode using theme switcher\n3. Verify background changes to dark theme (dark:bg-gray-900)\n4. Check card backgrounds use dark theme (dark:bg-gray-800)\n5. Verify text colors invert properly (dark:text-white)\n6. Test stat card icon backgrounds in dark mode\n7. Check status badge colors in dark theme\n8. Verify border colors adapt (dark:border-gray-700)\n9. Test button styling in dark mode\n10. Check accessibility and contrast ratios",
    "test_status": "pending",
    "priority": "medium",
    "category": "ui"
  },
  {
    "test_plan_no": "STP-015-16",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.16: Navigation Integration",
    "description": "Verify dashboard navigation links work correctly and maintain admin context",
    "scenario": "Admin navigates from dashboard to various admin sections and returns",
    "expected_results": "All navigation links work correctly and admin context is maintained",
    "procedure": "1. Navigate to admin dashboard page\n2. Click 'Player Analytics' button\n3. Verify navigation to data_analytics.player_analytics\n4. Use browser back to return to dashboard\n5. Click 'System Tests' button and verify navigation\n6. Test 'Manage Users' link navigation\n7. Check 'View Logs' link functionality\n8. Test quick action navigation links\n9. Verify admin context preservation throughout navigation\n10. Check proper URL routing for all links",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-015-17",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.17: Statistics Data Accuracy",
    "description": "Verify dashboard statistics display accurate real-time data",
    "scenario": "Dashboard reflects current system state with accurate user and activity metrics",
    "expected_results": "All statistics match actual database counts and system activity",
    "procedure": "1. Note current dashboard statistics\n2. Create a new user account\n3. Refresh dashboard and verify total users increased\n4. Attempt failed login and check failed attempts count\n5. Verify email verification to test verification counts\n6. Submit contact form and check recent contacts\n7. Test user activation/deactivation affects active user count\n8. Verify all statistics update correctly\n9. Check data consistency across dashboard refreshes\n10. Test statistics accuracy with multiple simultaneous changes",
    "test_status": "pending",
    "priority": "high",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-015-18",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.18: Admin API Endpoints",
    "description": "Verify admin API endpoints work correctly for dashboard data",
    "scenario": "Dashboard potentially uses API endpoints for dynamic data updates",
    "expected_results": "API endpoints return proper JSON data with admin authentication",
    "procedure": "1. Navigate to admin dashboard page\n2. Check for AJAX requests to /admin/api/stats\n3. Test API endpoint authentication requirements\n4. Verify JSON response format for statistics\n5. Check API error handling for invalid requests\n6. Test API response time and performance\n7. Verify API security prevents unauthorized access\n8. Check API data matches dashboard display\n9. Test API with different admin user accounts\n10. Verify API error responses are properly handled",
    "test_status": "pending",
    "priority": "medium",
    "category": "integration"
  },
  {
    "test_plan_no": "STP-015-19",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.19: Performance and Loading",
    "description": "Verify admin dashboard loads efficiently with optimal performance",
    "scenario": "Admin accesses dashboard and expects fast loading times with all data",
    "expected_results": "Dashboard loads within acceptable time limits with all functionality",
    "procedure": "1. Clear browser cache\n2. Open browser developer tools Performance tab\n3. Navigate to admin dashboard page\n4. Record page load time and performance metrics\n5. Verify total load time is under 3 seconds\n6. Check First Contentful Paint (FCP) is under 1.5 seconds\n7. Verify database query performance\n8. Test page load on slower network connections\n9. Check for render-blocking resources\n10. Verify admin.js loading doesn't impact performance\n11. Test dashboard with large datasets",
    "test_status": "pending",
    "priority": "medium",
    "category": "performance"
  },
  {
    "test_plan_no": "STP-015-20",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.20: Admin User Isolation",
    "description": "Verify admin dashboard respects user boundaries and shows system-wide data appropriately",
    "scenario": "Admin views system-wide statistics while maintaining proper data boundaries",
    "expected_results": "Dashboard shows comprehensive system data while respecting user privacy",
    "procedure": "1. Login as Admin A and note dashboard statistics\n2. Login as Admin B and verify same system statistics\n3. Check that personal user data is appropriately aggregated\n4. Verify no sensitive user information is exposed in overview\n5. Test that recent users show appropriate public information\n6. Check login activity respects privacy (no passwords shown)\n7. Verify statistics are system-wide, not user-specific\n8. Test admin role consistency across multiple admin accounts\n9. Check data isolation from regular user views\n10. Verify proper admin privilege enforcement",
    "test_status": "pending",
    "priority": "critical",
    "category": "security"
  },
  {
    "test_plan_no": "STP-015-21",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.21: Session Management",
    "description": "Verify admin dashboard handles session expiration and security properly",
    "scenario": "Admin session expires or encounters security issues while using dashboard",
    "expected_results": "Proper session handling with secure redirects and authentication checks",
    "procedure": "1. Login as admin and navigate to dashboard\n2. Let session expire or manually clear session\n3. Attempt to refresh dashboard page\n4. Verify redirect to login page\n5. Check no sensitive admin data remains visible\n6. Test concurrent admin sessions\n7. Verify admin session timeout behavior\n8. Check session security headers\n9. Test admin logout functionality\n10. Verify clean session state after logout",
    "test_status": "pending",
    "priority": "high",
    "category": "security"
  },
  {
    "test_plan_no": "STP-015-22",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.22: Icon and Visual Elements",
    "description": "Verify all icons and visual elements display correctly in admin dashboard",
    "scenario": "Admin views dashboard with proper icon rendering and visual hierarchy",
    "expected_results": "All Bootstrap icons and visual elements render correctly with proper styling",
    "procedure": "1. Navigate to admin dashboard page\n2. Verify all Bootstrap icons load correctly (bi-people, bi-person-plus, etc.)\n3. Check icon sizing (text-xl sm:text-2xl)\n4. Verify icon colors match component themes\n5. Test icon display in light and dark modes\n6. Check user avatar generation with username initials\n7. Verify status badge styling and colors\n8. Test icon accessibility and screen reader compatibility\n9. Check icon spacing and alignment\n10. Verify responsive icon behavior",
    "test_status": "pending",
    "priority": "low",
    "category": "ui"
  },
  {
    "test_plan_no": "STP-015-23",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.23: Form Security and CSRF",
    "description": "Verify admin dashboard forms include proper CSRF protection",
    "scenario": "Admin submits forms through dashboard with security protection",
    "expected_results": "All admin forms include CSRF tokens and proper security measures",
    "procedure": "1. Navigate to admin dashboard page\n2. Inspect cleanup logs form for CSRF token\n3. Verify CSRF protection on form submission\n4. Test form submission without CSRF token (should fail)\n5. Check form method is POST for destructive actions\n6. Verify proper form validation\n7. Test form security against common attacks\n8. Check admin form error handling\n9. Verify secure form data transmission\n10. Test form timeout and session security",
    "test_status": "pending",
    "priority": "high",
    "category": "security"
  },
  {
    "test_plan_no": "STP-015-24",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.24: Browser Compatibility",
    "description": "Verify admin dashboard works correctly across different browsers",
    "scenario": "Admin accesses dashboard using various web browsers",
    "expected_results": "Dashboard functions properly in all major browsers with consistent appearance",
    "procedure": "1. Test admin dashboard in Chrome (latest version)\n2. Verify functionality in Firefox (latest version)\n3. Check Safari compatibility (if available)\n4. Test Edge browser compatibility\n5. Verify CSS Grid and Flexbox support\n6. Check JavaScript module support\n7. Test animations and transitions\n8. Verify responsive design across browsers\n9. Check admin.js compatibility\n10. Test form submissions across browsers",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-015-25",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.25: Data Refresh and Updates",
    "description": "Verify dashboard data refreshes and updates correctly",
    "scenario": "Dashboard data updates when system activity occurs",
    "expected_results": "Dashboard reflects current system state with accurate real-time data",
    "procedure": "1. Note current dashboard metrics\n2. Perform user registration in another tab\n3. Refresh dashboard and verify user count updated\n4. Generate login attempts and check activity updates\n5. Verify email verification affects verification counts\n6. Test contact form submission affects contact counts\n7. Check automatic data refresh intervals (if implemented)\n8. Verify manual refresh updates all data\n9. Test partial data updates vs full refresh\n10. Check data consistency across multiple refreshes",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-015-26",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.26: Accessibility Compliance",
    "description": "Verify admin dashboard meets accessibility standards (WCAG)",
    "scenario": "Admin with disabilities accesses dashboard using assistive technologies",
    "expected_results": "Dashboard is fully accessible with proper labels, ARIA attributes, and keyboard navigation",
    "procedure": "1. Navigate to admin dashboard page\n2. Test keyboard navigation through all interactive elements\n3. Verify tab order is logical\n4. Check all buttons and links have proper labels\n5. Test dashboard with screen reader software\n6. Verify focus indicators are visible and clear\n7. Check color contrast ratios meet WCAG AA standards\n8. Test statistics are accessible to screen readers\n9. Verify section headings provide proper structure\n10. Check ARIA landmarks and roles are properly used\n11. Test quick action buttons are keyboard accessible",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-015-27",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.27: Empty State Handling",
    "description": "Verify dashboard handles empty states gracefully for new installations",
    "scenario": "Admin views dashboard on new system installation with minimal data",
    "expected_results": "Dashboard shows appropriate empty states and helpful guidance",
    "procedure": "1. Set up clean system with minimal test data\n2. Navigate to admin dashboard\n3. Verify zero user counts display appropriately\n4. Check empty recent users section handling\n5. Verify empty login activity section\n6. Test statistics with zero values\n7. Check helpful messaging for empty states\n8. Verify dashboard layout remains intact with empty data\n9. Test call-to-action guidance for new admins\n10. Check graceful handling of null/undefined data",
    "test_status": "pending",
    "priority": "low",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-015-28",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.28: Logging and Monitoring",
    "description": "Verify admin dashboard interactions are properly logged for security monitoring",
    "scenario": "Admin dashboard access and actions are logged for audit purposes",
    "expected_results": "All admin dashboard activities are properly logged with appropriate detail",
    "procedure": "1. Navigate to admin dashboard page\n2. Verify dashboard access is logged\n3. Check admin authentication events are recorded\n4. Test cleanup action logging\n5. Verify navigation to other admin sections is logged\n6. Check error logging for failed operations\n7. Test security event logging\n8. Verify log format includes timestamp, user, and action\n9. Check log retention and rotation policies\n10. Test log analysis for security monitoring",
    "test_status": "pending",
    "priority": "medium",
    "category": "security"
  },
  {
    "test_plan_no": "STP-015-29",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.29: Component Integration",
    "description": "Verify dashboard components integrate correctly and maintain consistency",
    "scenario": "All dashboard components work together to provide cohesive admin experience",
    "expected_results": "Dashboard components integrate seamlessly with consistent styling and behavior",
    "procedure": "1. Navigate to admin dashboard page\n2. Verify header component integrates with base template\n3. Check stats-cards component displays properly\n4. Test recent-users component integration\n5. Verify login-activity component functionality\n6. Check quick-actions component interaction\n7. Test component responsive behavior consistency\n8. Verify shared styling and theme consistency\n9. Check component data flow and dependencies\n10. Test component error handling and fallbacks",
    "test_status": "pending",
    "priority": "medium",
    "category": "integration"
  },
  {
    "test_plan_no": "STP-015-30",
    "module_name": "Admin-Dashboard-Page",
    "screen_design_ref": "Figure 15.30: Security Audit and Compliance",
    "description": "Verify admin dashboard system meets security best practices and compliance requirements",
    "scenario": "Security audit of admin dashboard functionality and access control",
    "expected_results": "Admin dashboard follows security best practices and prevents unauthorized access",
    "procedure": "1. Audit admin authentication requirements\n2. Verify admin privilege escalation protection\n3. Check protection against admin impersonation\n4. Test for information disclosure vulnerabilities\n5. Verify proper error handling doesn't leak information\n6. Check logging for security events\n7. Test dashboard against common attack vectors (XSS, CSRF, etc.)\n8. Verify secure communication (HTTPS enforcement)\n9. Check admin session security\n10. Verify data encryption and storage security\n11. Test compliance with security frameworks (OWASP)\n12. Check admin activity monitoring and alerting\n13. Verify proper admin user management\n14. Test admin dashboard isolation from user areas",
    "test_status": "pending",
    "priority": "critical",
    "category": "security"
  }
]
