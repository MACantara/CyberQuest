[
  {
    "test_plan_no": "STP-010-01",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.1: Password Reset Page Layout",
    "description": "Verify that the Password Reset page loads correctly when accessing with valid token",
    "scenario": "User clicks valid reset link from email and accesses the password reset page",
    "expected_results": "Display the complete password reset page with cybersecurity-themed design and password input forms",
    "procedure": "1. Open web browser\n2. Navigate to valid reset URL: http://localhost:5000/password/reset/[valid_token]\n3. Verify page loads completely\n4. Check page title displays 'Reset Password'\n5. Verify password reset form is visible and properly styled\n6. Check cybersecurity-themed design elements with shield-lock icon\n7. Verify gradient background and animated elements",
    "test_status": "pending",
    "priority": "critical",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-010-02",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.2: Password Reset Header Design",
    "description": "Verify the password reset header displays correctly with green gradient theme",
    "scenario": "User views the password reset header with security-focused styling",
    "expected_results": "Display 'Reset Password' title with shield-lock icon and green gradient design",
    "procedure": "1. Navigate to valid reset URL\n2. Verify gradient background from blue to purple (from-blue-50 via-indigo-100 to-purple-100)\n3. Check shield-lock icon (bi-shield-lock) in green gradient circle\n4. Verify 'Reset Password' title with green gradient text effect\n5. Check subtitle 'Enter your new password below'\n6. Verify animated background elements are present\n7. Test dark mode compatibility with gradient adjustments",
    "test_status": "pending",
    "priority": "medium",
    "category": "ui"
  },
  {
    "test_plan_no": "STP-010-03",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.3: New Password Input Field",
    "description": "Verify new password input field displays correctly with proper validation and styling",
    "scenario": "User enters new password with real-time validation feedback",
    "expected_results": "Display properly styled password field with key icon, validation, and security guidance",
    "procedure": "1. Navigate to valid reset URL\n2. Verify 'New Password' field with key icon (bi-key)\n3. Check purple color scheme for password field (text-purple-600 dark:text-purple-400)\n4. Test focus effects (focus:ring-2 focus:ring-purple-500)\n5. Verify placeholder text 'Enter your new password'\n6. Check password type input with proper masking\n7. Test field styling in dark mode\n8. Verify password strength validation integration",
    "test_status": "pending",
    "priority": "high",
    "category": "ui"
  },
  {
    "test_plan_no": "STP-010-04",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.4: Confirm Password Input Field",
    "description": "Verify confirm password input field displays correctly with matching validation",
    "scenario": "User enters password confirmation with real-time matching validation",
    "expected_results": "Display properly styled confirm password field with shield-lock icon and matching validation",
    "procedure": "1. Navigate to valid reset URL\n2. Verify 'Confirm New Password' field with shield-lock icon (bi-shield-lock)\n3. Check orange color scheme for confirm field (text-orange-600 dark:text-orange-400)\n4. Test focus effects (focus:ring-2 focus:ring-orange-500)\n5. Verify placeholder text 'Confirm your new password'\n6. Check password type input with proper masking\n7. Test real-time password matching validation\n8. Verify styling consistency with first password field",
    "test_status": "pending",
    "priority": "high",
    "category": "ui"
  },
  {
    "test_plan_no": "STP-010-05",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.5: hCaptcha Integration",
    "description": "Verify hCaptcha displays and functions correctly for security verification",
    "scenario": "User completes hCaptcha verification before submitting password reset",
    "expected_results": "Display hCaptcha widget with security verification label when hCaptcha is enabled",
    "procedure": "1. Navigate to valid reset URL with hCaptcha enabled\n2. Verify 'Security Verification' label with robot icon (bi-robot)\n3. Check hCaptcha widget is displayed and centered\n4. Test hCaptcha functionality by completing verification\n5. Verify hCaptcha integration with form submission\n6. Test page behavior when hCaptcha is disabled\n7. Check hCaptcha styling consistency with page theme",
    "test_status": "pending",
    "priority": "high",
    "category": "security"
  },
  {
    "test_plan_no": "STP-010-06",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.6: Reset Password Button",
    "description": "Verify reset password button displays correctly with loading states",
    "scenario": "User submits password reset and observes button behavior",
    "expected_results": "Display dynamic button with proper styling for normal and loading states",
    "procedure": "1. Navigate to valid reset URL\n2. Verify normal state shows 'Reset Password' with shield-check icon\n3. Check green gradient styling (from-green-500 to-emerald-600)\n4. Test hover effects (hover:from-green-600 hover:to-emerald-700, hover:scale-105)\n5. Verify focus ring styling (focus:ring-4 focus:ring-green-500/25)\n6. Test loading state animation (spinner and 'Resetting Password...' text)\n7. Check button accessibility and keyboard interaction\n8. Verify button styling in dark mode",
    "test_status": "pending",
    "priority": "medium",
    "category": "ui"
  },
  {
    "test_plan_no": "STP-010-07",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.7: Back to Login Link",
    "description": "Verify back to login link displays and functions correctly",
    "scenario": "User decides to return to login page instead of resetting password",
    "expected_results": "Display 'Back to Login' link that navigates to login page with proper styling",
    "procedure": "1. Navigate to valid reset URL\n2. Scroll to bottom of form\n3. Verify 'Back to Login' link with blue styling and arrow icon\n4. Click link and verify navigation to login page\n5. Test link hover effects and accessibility\n6. Verify link styling in dark mode\n7. Check link maintains token security (no token exposure)",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-010-08",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.8: Successful Password Reset",
    "description": "Verify successful password reset with valid token and strong password",
    "scenario": "User completes password reset with valid token and strong password",
    "expected_results": "Password is updated successfully and user can login with new password",
    "procedure": "1. Navigate to valid reset URL\n2. Enter strong password in 'New Password' field\n3. Enter matching password in 'Confirm New Password' field\n4. Complete hCaptcha if enabled\n5. Click 'Reset Password' button\n6. Verify success message 'Your password has been reset successfully! Please log in with your new password.'\n7. Check redirect to login page\n8. Verify password is updated in database\n9. Test login with new password\n10. Verify reset token is consumed and invalidated",
    "test_status": "pending",
    "priority": "critical",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-010-09",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.9: Invalid Token Handling",
    "description": "Verify proper handling of invalid or expired reset tokens",
    "scenario": "User attempts to access password reset page with invalid or expired token",
    "expected_results": "Display error message and redirect to forgot password page",
    "procedure": "1. Navigate to reset URL with invalid token\n2. Verify error message 'Invalid or expired reset link.'\n3. Check automatic redirect to forgot password page\n4. Test with expired token (older than 1 hour)\n5. Test with malformed token\n6. Test with token that has already been used\n7. Verify no password reset form is displayed\n8. Check security against token manipulation",
    "test_status": "pending",
    "priority": "critical",
    "category": "security"
  },
  {
    "test_plan_no": "STP-010-10",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.10: Password Strength Validation",
    "description": "Verify password strength validation using zxcvbn with user context",
    "scenario": "User enters passwords of various strengths and receives appropriate feedback",
    "expected_results": "Strong password validation with user-specific context and clear feedback",
    "procedure": "1. Navigate to valid reset URL\n2. Enter weak password (e.g., '123456')\n3. Verify password strength validation error\n4. Test password containing username\n5. Test password containing email parts\n6. Enter strong password with mixed case, numbers, symbols\n7. Verify validation passes for strong passwords\n8. Check real-time feedback if implemented\n9. Test password validation with user context (username, email)",
    "test_status": "pending",
    "priority": "high",
    "category": "security"
  },
  {
    "test_plan_no": "STP-010-11",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.11: Password Confirmation Validation",
    "description": "Verify password confirmation matching validation",
    "scenario": "User enters non-matching passwords and receives validation feedback",
    "expected_results": "Clear validation error when passwords don't match",
    "procedure": "1. Navigate to valid reset URL\n2. Enter valid password in 'New Password' field\n3. Enter different password in 'Confirm New Password' field\n4. Submit form\n5. Verify error message 'Passwords do not match.'\n6. Check both fields are highlighted for error\n7. Test real-time matching validation if implemented\n8. Verify successful submission when passwords match",
    "test_status": "pending",
    "priority": "high",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-010-12",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.12: Empty Field Validation",
    "description": "Verify validation for empty required fields",
    "scenario": "User submits form with empty password fields",
    "expected_results": "Display appropriate validation errors for empty required fields",
    "procedure": "1. Navigate to valid reset URL\n2. Leave 'New Password' field empty\n3. Submit form\n4. Verify error message 'Password is required.'\n5. Enter password in first field, leave confirm field empty\n6. Submit form and verify password matching error\n7. Check HTML5 required attribute validation\n8. Test client-side and server-side validation consistency",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-010-13",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.13: hCaptcha Validation",
    "description": "Verify hCaptcha validation prevents automated attacks",
    "scenario": "User attempts to submit form without completing hCaptcha verification",
    "expected_results": "Form submission blocked until hCaptcha is completed successfully",
    "procedure": "1. Navigate to valid reset URL with hCaptcha enabled\n2. Enter valid matching passwords\n3. Submit form without completing hCaptcha\n4. Verify error message 'Please complete the captcha verification.'\n5. Complete hCaptcha verification\n6. Submit form and verify successful processing\n7. Test hCaptcha timeout and re-verification\n8. Check hCaptcha integration prevents bot attacks",
    "test_status": "pending",
    "priority": "high",
    "category": "security"
  },
  {
    "test_plan_no": "STP-010-14",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.14: Already Logged In Redirect",
    "description": "Verify redirect behavior when user is already authenticated",
    "scenario": "Logged-in user tries to access password reset page",
    "expected_results": "Automatic redirect to home page for authenticated users",
    "procedure": "1. Login with existing account\n2. Navigate to password reset URL while logged in\n3. Verify automatic redirect to home page\n4. Check redirect preserves security (no token exposure)\n5. Test redirect with various tokens (valid/invalid)\n6. Verify user experience is seamless\n7. Check no password reset form is displayed to logged-in users",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-010-15",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.15: Database Disabled Handling",
    "description": "Verify proper handling when database is disabled (Vercel environment)",
    "scenario": "User attempts password reset in deployment environment with disabled database",
    "expected_results": "Display warning message about password reset unavailability",
    "procedure": "1. Set DISABLE_DATABASE config to True\n2. Navigate to any reset URL\n3. Verify warning message 'Password reset is not available in this deployment environment.'\n4. Check redirect to home page\n5. Verify no password reset form is displayed\n6. Test user experience with clear messaging\n7. Check no database operations are attempted",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-010-16",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.16: Password Hashing Security",
    "description": "Verify password is properly hashed using Argon2 before storage",
    "scenario": "User successfully resets password and new password is securely stored",
    "expected_results": "Password is hashed with Argon2 and never stored in plain text",
    "procedure": "1. Complete successful password reset\n2. Check database to verify password is hashed\n3. Verify Argon2 hashing algorithm is used\n4. Check password hash is different from previous hash\n5. Verify plain text password is never stored\n6. Test password verification with new hash\n7. Check hashing error handling (HashingError)\n8. Verify salt is unique for each password",
    "test_status": "pending",
    "priority": "critical",
    "category": "security"
  },
  {
    "test_plan_no": "STP-010-17",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.17: Token Consumption and Cleanup",
    "description": "Verify reset tokens are properly consumed and cleaned up after use",
    "scenario": "User successfully resets password and token is invalidated",
    "expected_results": "Reset token is marked as used and cannot be reused",
    "procedure": "1. Complete successful password reset\n2. Verify reset token is marked as used in database\n3. Attempt to use same token again\n4. Verify token is rejected as already used\n5. Check token cleanup for expired tokens\n6. Verify only one-time use per token\n7. Test token invalidation on password change\n8. Check old tokens are cleaned up properly",
    "test_status": "pending",
    "priority": "high",
    "category": "security"
  },
  {
    "test_plan_no": "STP-010-18",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.18: Database Error Handling",
    "description": "Verify proper handling of database errors during password reset",
    "scenario": "Database errors occur during password reset process",
    "expected_results": "Graceful error handling with proper logging and user feedback",
    "procedure": "1. Simulate database connection failure during reset\n2. Submit password reset form\n3. Verify appropriate error handling\n4. Check error logging for debugging\n5. Test DatabaseError exception handling\n6. Verify user receives appropriate feedback\n7. Check system recovery from database errors\n8. Test transaction rollback on failures",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-010-19",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.19: CSRF Protection",
    "description": "Verify CSRF token integration and protection",
    "scenario": "User submits password reset form with CSRF protection enabled",
    "expected_results": "CSRF token is properly included and validated with form submission",
    "procedure": "1. Navigate to valid reset URL\n2. View page source and verify csrf_token hidden field\n3. Submit form with valid passwords\n4. Verify CSRF token is included in POST request\n5. Test form submission without CSRF token (should fail)\n6. Check CSRF token validation in Flask-WTF\n7. Verify security against CSRF attacks\n8. Test CSRF token refresh on page reload",
    "test_status": "pending",
    "priority": "high",
    "category": "security"
  },
  {
    "test_plan_no": "STP-010-20",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.20: Form Animation Sequence",
    "description": "Verify password reset form elements animate correctly",
    "scenario": "User observes form appearance animations on page load",
    "expected_results": "Form elements appear in staggered sequence with fade-in-up animations",
    "procedure": "1. Navigate to valid reset URL (clear cache first)\n2. Observe form animation sequence on page load\n3. Verify form container animates first (opacity-0 animate-fade-in-up)\n4. Check new password field animates with 0.3s delay\n5. Verify confirm password field animates with 0.4s delay\n6. Check hCaptcha section animates with 0.45s delay\n7. Verify button animates with 0.5s delay\n8. Check back to login link animates with 0.6s delay\n9. Test animation performance and smoothness",
    "test_status": "pending",
    "priority": "low",
    "category": "ui"
  },
  {
    "test_plan_no": "STP-010-21",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.21: Dark Mode Compatibility",
    "description": "Verify password reset page displays correctly in dark mode",
    "scenario": "User toggles dark mode and uses password reset page",
    "expected_results": "All elements display properly with dark theme colors and proper contrast",
    "procedure": "1. Navigate to valid reset URL\n2. Toggle dark mode using theme switcher\n3. Verify background gradient changes to dark theme\n4. Check form background uses dark theme (dark:bg-gray-800/90)\n5. Verify text colors invert properly (dark:text-white)\n6. Test input field styling in dark mode\n7. Check button gradients and hover effects\n8. Verify hCaptcha integration works in dark theme\n9. Test accessibility and contrast ratios",
    "test_status": "pending",
    "priority": "medium",
    "category": "ui"
  },
  {
    "test_plan_no": "STP-010-22",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.22: Responsive Design",
    "description": "Verify password reset page is responsive across different screen sizes",
    "scenario": "User accesses password reset page on mobile, tablet, and desktop devices",
    "expected_results": "Page adapts properly to different screen sizes while maintaining functionality",
    "procedure": "1. Navigate to valid reset URL on desktop (1920x1080)\n2. Verify max-width constraint (max-w-md) centers form\n3. Resize browser to tablet size (768px width)\n4. Check form scaling and spacing adjustments\n5. Resize to mobile size (375px width)\n6. Verify form remains usable on small screens\n7. Test touch interactions on mobile\n8. Check button size and touch targets meet accessibility guidelines\n9. Verify animated elements don't interfere on mobile\n10. Test landscape and portrait orientations",
    "test_status": "pending",
    "priority": "high",
    "category": "ui"
  },
  {
    "test_plan_no": "STP-010-23",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.23: JavaScript Loading and Error Handling",
    "description": "Verify JavaScript components load correctly and handle errors gracefully",
    "scenario": "User accesses password reset page and JavaScript components initialize",
    "expected_results": "All scripts load without errors and form functions with graceful degradation",
    "procedure": "1. Navigate to valid reset URL\n2. Open browser developer tools Console tab\n3. Verify no JavaScript errors on page load\n4. Check reset-password.js module loads correctly\n5. Test form functionality without JavaScript (graceful degradation)\n6. Verify hCaptcha handler script loads when enabled\n7. Check error handling for failed script loads\n8. Test password strength checker integration\n9. Verify real-time validation works with JavaScript",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-010-24",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.24: Token Expiration Handling",
    "description": "Verify proper handling of token expiration timing (1 hour limit)",
    "scenario": "User attempts to use reset token after expiration period",
    "expected_results": "Expired tokens are rejected with appropriate error message",
    "procedure": "1. Generate password reset token\n2. Wait for token to expire (or simulate expiration)\n3. Navigate to reset URL with expired token\n4. Verify error message 'Invalid or expired reset link.'\n5. Check redirect to forgot password page\n6. Test token expiration at exact 1-hour mark\n7. Verify token cleanup removes expired tokens\n8. Check database query efficiency for token validation",
    "test_status": "pending",
    "priority": "high",
    "category": "security"
  },
  {
    "test_plan_no": "STP-010-25",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.25: User Account Association",
    "description": "Verify reset token is properly associated with correct user account",
    "scenario": "User resets password and changes are applied to correct account",
    "expected_results": "Password reset affects only the user account associated with the token",
    "procedure": "1. Generate reset token for specific user account\n2. Complete password reset process\n3. Verify password change applies to correct user\n4. Test login with original account credentials (should fail)\n5. Test login with new password (should succeed)\n6. Verify no other user accounts are affected\n7. Check token-user association in database\n8. Test with multiple concurrent reset tokens",
    "test_status": "pending",
    "priority": "critical",
    "category": "security"
  },
  {
    "test_plan_no": "STP-010-26",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.26: Error Message Display",
    "description": "Verify error messages display correctly with proper styling and clarity",
    "scenario": "User encounters various errors and receives clear feedback",
    "expected_results": "Error messages are displayed prominently with clear, helpful text",
    "procedure": "1. Navigate to reset URL and trigger validation errors\n2. Verify error messages use consistent styling (flash messages)\n3. Check error messages are clearly visible\n4. Test multiple error scenarios (password strength, matching, captcha)\n5. Verify error messages don't expose sensitive information\n6. Check error message accessibility for screen readers\n7. Test error message dismissal functionality\n8. Verify error styling in both light and dark modes",
    "test_status": "pending",
    "priority": "medium",
    "category": "ui"
  },
  {
    "test_plan_no": "STP-010-27",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.27: Success Message and Redirect",
    "description": "Verify success message displays correctly and redirect functions properly",
    "scenario": "User successfully resets password and receives confirmation",
    "expected_results": "Clear success message followed by automatic redirect to login page",
    "procedure": "1. Complete successful password reset\n2. Verify success message 'Your password has been reset successfully! Please log in with your new password.'\n3. Check success message styling (green/success theme)\n4. Verify automatic redirect to login page\n5. Test redirect timing (not too fast/slow)\n6. Check redirect preserves any necessary parameters\n7. Verify success message accessibility\n8. Test user experience flow from reset to login",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-010-28",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.28: Performance and Loading",
    "description": "Verify password reset page loads efficiently with optimal performance",
    "scenario": "User accesses password reset page and expects fast loading times",
    "expected_results": "Page loads within acceptable time limits with all styling and functionality",
    "procedure": "1. Clear browser cache\n2. Open browser developer tools Performance tab\n3. Navigate to valid reset URL\n4. Record page load time and performance metrics\n5. Verify total load time is under 2 seconds\n6. Check First Contentful Paint (FCP) is under 1 second\n7. Verify Largest Contentful Paint (LCP) is acceptable\n8. Test page load on slower network connections\n9. Check for render-blocking resources\n10. Verify animations don't impact performance significantly",
    "test_status": "pending",
    "priority": "medium",
    "category": "performance"
  },
  {
    "test_plan_no": "STP-010-29",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.29: Accessibility Compliance",
    "description": "Verify password reset page meets accessibility standards (WCAG)",
    "scenario": "User with disabilities accesses password reset form using assistive technologies",
    "expected_results": "Form is fully accessible with proper labels, ARIA attributes, and keyboard navigation",
    "procedure": "1. Navigate to valid reset URL\n2. Test keyboard navigation through all form elements\n3. Verify tab order is logical (password → confirm → hCaptcha → button)\n4. Check all form fields have proper labels\n5. Test form with screen reader software\n6. Verify focus indicators are visible and clear\n7. Check color contrast ratios meet WCAG AA standards\n8. Test error messages are announced by screen readers\n9. Verify form validation errors are accessible\n10. Check ARIA landmarks and roles are properly used\n11. Test password field reveal functionality accessibility",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-010-30",
    "module_name": "Password Reset Page",
    "screen_design_ref": "Figure 10.30: Security Audit and Compliance",
    "description": "Verify password reset system meets security best practices and compliance requirements",
    "scenario": "Security audit of password reset functionality and implementation",
    "expected_results": "System follows security best practices and prevents common vulnerabilities",
    "procedure": "1. Audit password reset token validation and consumption\n2. Verify token cannot be reused after successful reset\n3. Check protection against timing attacks\n4. Test for injection vulnerabilities in form inputs\n5. Verify proper password hashing with Argon2\n6. Check CSRF protection implementation\n7. Test for session fixation vulnerabilities\n8. Verify proper error handling doesn't leak information\n9. Check logging for security events\n10. Verify compliance with security frameworks (OWASP)\n11. Test password reset against common attack vectors\n12. Verify secure communication (HTTPS enforcement)\n13. Check password strength requirements meet security standards",
    "test_status": "pending",
    "priority": "critical",
    "category": "security"
  }
]
