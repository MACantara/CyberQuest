[
  {
    "test_plan_no": "STP-039-01",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.1: Introduction Page Load and Navigation",
    "description": "Verify that the Blue Team vs Red Team introduction page loads correctly with all content sections",
    "scenario": "User navigates to Blue vs Red Team mode introduction page to learn about the simulation",
    "expected_results": "Introduction page displays with hero section, team comparison, scenario overview, and navigation buttons",
    "procedure": "1. Log in as authenticated user\n2. Navigate to /blue-vs-red/\n3. Verify page loads with gradient background and cyber grid\n4. Check hero section displays title and description\n5. Confirm 'Start Simulation' and 'Tutorial' buttons are present\n6. Verify team comparison cards are displayed\n7. Check floating orbs animation is active",
    "test_status": "pending",
    "priority": "critical",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-02",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.2: Introduction Page Interactive Elements",
    "description": "Verify interactive elements and animations work correctly on the introduction page",
    "scenario": "User interacts with various elements on the introduction page to explore features",
    "expected_results": "Hover effects, animations, and button interactions work smoothly with visual feedback",
    "procedure": "1. Load introduction page\n2. Hover over feature cards and verify hover effects\n3. Test keyboard navigation with Enter key\n4. Verify gradient shift animation is running\n5. Check floating orbs animation cycles properly\n6. Test button hover states and transitions\n7. Verify notification system displays feedback messages",
    "test_status": "pending",
    "priority": "medium",
    "category": "ui"
  },
  {
    "test_plan_no": "STP-039-03",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.3: Tutorial Page Content and Navigation",
    "description": "Verify the tutorial page displays comprehensive educational content about Blue vs Red Team concepts",
    "scenario": "User accesses tutorial to learn about Blue Team defense and Red Team attack methodologies",
    "expected_results": "Tutorial page shows team comparisons, scenario details, features overview, and tips section",
    "procedure": "1. Navigate to /blue-vs-red/tutorial\n2. Verify tutorial page loads with proper styling\n3. Check team comparison section displays Blue vs Red team roles\n4. Confirm scenario section explains Project Sentinel Academy context\n5. Verify features section covers AI engine, real-time monitoring, and defense tools\n6. Check tips section provides strategic guidance\n7. Confirm 'Ready to Start' section with navigation buttons",
    "test_status": "pending",
    "priority": "critical",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-04",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.4: Tutorial to Dashboard Navigation Flow",
    "description": "Verify navigation flow from tutorial to dashboard works correctly with next parameter handling",
    "scenario": "User completes tutorial and proceeds to dashboard simulation with proper parameter forwarding",
    "expected_results": "Tutorial completion redirects to dashboard when next=dashboard parameter is present",
    "procedure": "1. Navigate to /blue-vs-red/tutorial?next=dashboard\n2. Complete tutorial interactions\n3. Click 'Start Dashboard' button\n4. Verify redirection to /blue-vs-red/dashboard\n5. Check tutorial completion state is tracked\n6. Confirm dashboard loads with proper initialization\n7. Test direct navigation without next parameter",
    "test_status": "pending",
    "priority": "high",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-05",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.5: Dashboard Initialization and Layout",
    "description": "Verify the dashboard loads correctly with all simulation components and proper layout",
    "scenario": "User accesses the main simulation dashboard to begin Blue vs Red Team training",
    "expected_results": "Dashboard displays with network map, alert center, AI analysis, incident response, and terminal sections",
    "procedure": "1. Navigate to /blue-vs-red/dashboard\n2. Verify dashboard loads with dark theme styling\n3. Check Network Defense Map section is present\n4. Confirm Alert Center displays with counter\n5. Verify AI Threat Analysis panel is visible\n6. Check Incident Response section is available\n7. Confirm Defense Command Terminal is displayed\n8. Verify game controls menu is accessible",
    "test_status": "pending",
    "priority": "critical",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-06",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.6: Game Controller Initialization",
    "description": "Verify the Game Controller initializes correctly with proper game state and component integration",
    "scenario": "Game Controller orchestrates the simulation by initializing AI engine, UI manager, and game state",
    "expected_results": "Game Controller successfully initializes all components with default secure state",
    "procedure": "1. Load dashboard page\n2. Verify Game Controller initialization message in console\n3. Check default game state: isRunning=false, timeRemaining=900\n4. Confirm assets initialized as secure with 100% integrity\n5. Verify security controls are active (firewall, endpoint, access)\n6. Check AI Engine and UI Manager initialization\n7. Confirm terminal displays welcome messages",
    "test_status": "pending",
    "priority": "critical",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-07",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.7: AI Engine Q-Learning System",
    "description": "Verify the AI Engine implements Q-Learning algorithm correctly for adaptive Red Team attacks",
    "scenario": "AI Engine uses Q-Learning to adapt attack strategies based on Blue Team defensive responses",
    "expected_results": "AI Engine maintains Q-table, selects actions using exploration/exploitation, and updates based on success/failure",
    "procedure": "1. Start simulation to activate AI Engine\n2. Verify Q-Learning parameters initialization (learning rate, discount factor, exploration rate)\n3. Check Q-table creation and state-action mapping\n4. Confirm attack type selection based on MITRE ATT&CK framework\n5. Verify reward calculation based on attack success/detection\n6. Check exploration rate decay over time\n7. Confirm Q-table updates after each attack attempt",
    "test_status": "pending",
    "priority": "high",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-08",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.8: Adaptive Learning Integration",
    "description": "Verify adaptive learning system adjusts difficulty based on player performance",
    "scenario": "Adaptive learning monitors player actions and adjusts AI difficulty to maintain appropriate challenge level",
    "expected_results": "System tracks player performance and dynamically adjusts AI parameters and attack frequency",
    "procedure": "1. Initialize simulation with adaptive learning enabled\n2. Perform correct defensive actions and verify performance tracking\n3. Check difficulty adjustment based on high performance\n4. Perform incorrect actions and verify performance degradation tracking\n5. Confirm difficulty decrease when performance is low\n6. Verify notification messages for difficulty changes\n7. Check performance metrics reset between sessions",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-09",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.9: Game State Management",
    "description": "Verify game state management handles start, pause, stop, and reset operations correctly",
    "scenario": "Game Controller manages simulation lifecycle through various game states and transitions",
    "expected_results": "Game state transitions work correctly with proper UI updates and component synchronization",
    "procedure": "1. Verify initial game state (not running)\n2. Start simulation and check state transition to running\n3. Confirm timer starts and AI attack sequence begins\n4. Pause simulation and verify timer stops\n5. Resume simulation and check timer continues\n6. Stop simulation and verify state reset\n7. Reset simulation and confirm all components return to initial state",
    "test_status": "pending",
    "priority": "critical",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-10",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.10: Network Defense Map Visualization",
    "description": "Verify the network defense map displays assets correctly with real-time status updates",
    "scenario": "Network map visualizes Project Sentinel Academy infrastructure with dynamic asset status indicators",
    "expected_results": "Network map shows assets with color-coded status, integrity bars, and real-time updates during attacks",
    "procedure": "1. Load dashboard and verify network map display\n2. Check initial asset status (all secure with green indicators)\n3. Start simulation and monitor asset status changes\n4. Verify color coding: green (secure), orange (vulnerable), red (compromised)\n5. Check integrity percentage updates in real-time\n6. Confirm asset hover effects and interactive elements\n7. Verify network connection lines between assets",
    "test_status": "pending",
    "priority": "high",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-11",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.11: Alert Center and Notification System",
    "description": "Verify the alert center displays security alerts with proper severity classification and real-time updates",
    "scenario": "Alert center receives and displays security alerts from AI attacks with appropriate severity levels",
    "expected_results": "Alert center shows alerts with severity badges, timestamps, and dynamic counter updates",
    "procedure": "1. Start simulation to generate alerts\n2. Verify alert display with severity classification (low, medium, high, critical)\n3. Check alert counter updates dynamically\n4. Confirm timestamp display for each alert\n5. Verify severity color coding (green, yellow, orange, red)\n6. Check alert scrolling and overflow handling\n7. Test alert acknowledgment and status updates",
    "test_status": "pending",
    "priority": "high",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-12",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.12: Defense Command Terminal",
    "description": "Verify the Defense Command Terminal accepts commands and provides interactive Blue Team defense capabilities",
    "scenario": "Blue Team defender uses terminal commands to analyze threats, implement defenses, and respond to incidents",
    "expected_results": "Terminal accepts commands, displays help information, executes defensive actions, and provides feedback",
    "procedure": "1. Access Defense Command Terminal in dashboard\n2. Type 'help' command and verify available commands list\n3. Execute 'status' command to view system status\n4. Run 'assets' command to display asset information\n5. Test 'scan' command for security scanning\n6. Execute 'block [IP]' command for IP blocking\n7. Verify terminal scrolling and command history",
    "test_status": "pending",
    "priority": "critical",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-13",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.13: AI Attack Execution and Detection",
    "description": "Verify AI attacks are executed correctly with proper detection mechanisms and impact assessment",
    "scenario": "AI engine launches various attack types against assets with realistic detection probabilities",
    "expected_results": "AI attacks target assets, trigger alerts when detected, and impact asset integrity appropriately",
    "procedure": "1. Start simulation to enable AI attacks\n2. Monitor AI attack execution in console logs\n3. Verify different attack types (reconnaissance, lateral movement, exfiltration)\n4. Check detection probability calculations\n5. Confirm alert generation for detected attacks\n6. Verify asset integrity decreases for successful attacks\n7. Check attack success/failure feedback to Q-Learning system",
    "test_status": "pending",
    "priority": "critical",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-14",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.14: Security Controls Management",
    "description": "Verify security controls can be toggled and affect attack success rates appropriately",
    "scenario": "Blue Team manages security controls (firewall, endpoint protection, access control) to improve defenses",
    "expected_results": "Security controls toggle correctly and influence AI attack effectiveness and detection rates",
    "procedure": "1. Access security controls panel in dashboard\n2. Verify initial control states (all active)\n3. Toggle firewall control and check status update\n4. Disable endpoint protection and monitor attack success changes\n5. Toggle access control and verify impact on lateral movement\n6. Check visual indicators update (green/red status)\n7. Confirm effectiveness percentages are displayed",
    "test_status": "pending",
    "priority": "high",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-15",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.15: Real-time Timer and Game Duration",
    "description": "Verify the simulation timer counts down correctly and triggers game end conditions",
    "scenario": "Timer manages simulation duration with visual countdown and automatic game termination",
    "expected_results": "Timer displays correctly, counts down from 15 minutes, and ends game when reaching zero",
    "procedure": "1. Start simulation and verify timer begins at 15:00\n2. Check timer counts down in real-time (seconds)\n3. Pause simulation and verify timer stops\n4. Resume and confirm timer continues from paused point\n5. Monitor timer display format (MM:SS)\n6. Wait for timer to reach low values and check warning states\n7. Verify game ends automatically when timer reaches 0:00",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-16",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.16: Incident Response System",
    "description": "Verify incident response system logs and tracks security incidents with proper categorization",
    "scenario": "System records security incidents from AI attacks and provides incident management capabilities",
    "expected_results": "Incidents are logged with timestamps, severity, affected assets, and response options",
    "procedure": "1. Start simulation to generate incidents\n2. Verify incident logging for AI attacks\n3. Check incident categorization by type and severity\n4. Confirm timestamp accuracy for incident records\n5. Verify affected asset identification in incidents\n6. Check incident response options availability\n7. Test incident resolution and status updates",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-17",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.17: Player Action Recording and Analytics",
    "description": "Verify player actions are recorded correctly for performance analysis and adaptive learning",
    "scenario": "System tracks all player defensive actions, response times, and decision quality for learning optimization",
    "expected_results": "Player actions are logged with timestamps, effectiveness ratings, and contribute to performance metrics",
    "procedure": "1. Perform various defensive actions during simulation\n2. Verify action recording in adaptive learning system\n3. Check response time measurement accuracy\n4. Confirm correct/incorrect action classification\n5. Verify hint usage tracking\n6. Check performance score calculation\n7. Confirm action data contributes to difficulty adjustment",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-18",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.18: Game Results and Scoring System",
    "description": "Verify game completion generates accurate results with comprehensive scoring metrics",
    "scenario": "Game end calculates final score based on asset integrity, detection rate, and response effectiveness",
    "expected_results": "Game results display final score, performance breakdown, asset status summary, and recommendations",
    "procedure": "1. Complete a full simulation session\n2. Verify game over modal displays results\n3. Check final score calculation components\n4. Confirm asset integrity percentage in results\n5. Verify detection rate calculation accuracy\n6. Check average response time metrics\n7. Confirm performance recommendations are provided",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-19",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.19: API Endpoints and State Management",
    "description": "Verify backend API endpoints handle game state operations correctly",
    "scenario": "Frontend communicates with backend APIs for game state management, session tracking, and result storage",
    "expected_results": "API endpoints respond correctly to game state requests and maintain session integrity",
    "procedure": "1. Test GET /blue-vs-red/api/game-state endpoint\n2. Verify POST /blue-vs-red/api/game-state updates state\n3. Check POST /blue-vs-red/api/start-game starts session\n4. Test POST /blue-vs-red/api/stop-game ends session\n5. Verify POST /blue-vs-red/api/reset-game resets state\n6. Check player and AI action logging endpoints\n7. Test game results retrieval endpoint",
    "test_status": "pending",
    "priority": "high",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-20",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.20: Error Handling and Recovery",
    "description": "Verify proper error handling when simulation encounters issues or invalid states",
    "scenario": "System handles various error conditions gracefully during simulation operations",
    "expected_results": "Appropriate error messages display and recovery options are provided for operation failures",
    "procedure": "1. Test invalid API requests and verify error responses\n2. Simulate network disconnection during game session\n3. Test invalid terminal commands and error messaging\n4. Verify handling of corrupted game state\n5. Check error display for failed AI operations\n6. Test recovery from browser refresh during active session\n7. Verify error logging and user feedback systems",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-21",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.21: Performance Under Load",
    "description": "Verify simulation maintains performance during intensive AI operations and real-time updates",
    "scenario": "System performance remains stable during high-frequency AI attacks and UI updates",
    "expected_results": "Smooth performance during intensive simulation with responsive user interface",
    "procedure": "1. Start simulation with maximum AI attack frequency\n2. Monitor CPU and memory usage during operation\n3. Check UI responsiveness during rapid alert generation\n4. Verify smooth animations and transitions under load\n5. Test terminal responsiveness with rapid command input\n6. Check network map updates during multiple simultaneous attacks\n7. Verify timer accuracy under processing load",
    "test_status": "pending",
    "priority": "medium",
    "category": "performance"
  },
  {
    "test_plan_no": "STP-039-22",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.22: UI Manager Real-time Updates",
    "description": "Verify UI Manager correctly updates all interface elements in real-time during simulation",
    "scenario": "UI Manager coordinates updates across all dashboard components based on game state changes",
    "expected_results": "All UI elements update synchronously and accurately reflect current game state",
    "procedure": "1. Start simulation and monitor UI update coordination\n2. Verify system status indicators update correctly\n3. Check asset status visualization updates\n4. Confirm alert center updates in real-time\n5. Verify security controls reflect current state\n6. Check timer display updates smoothly\n7. Confirm terminal output updates properly",
    "test_status": "pending",
    "priority": "high",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-23",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.23: Session Persistence and Recovery",
    "description": "Verify simulation state persistence across browser sessions and page refreshes",
    "scenario": "Game state is maintained and recoverable during browser navigation and session interruptions",
    "expected_results": "Session state persists across page refreshes and browser restarts with proper recovery mechanisms",
    "procedure": "1. Start simulation and progress through several attacks\n2. Refresh browser page and verify state recovery\n3. Navigate away and return to verify session persistence\n4. Close browser and reopen to test session restoration\n5. Check localStorage state management\n6. Verify proper cleanup on session end\n7. Test multiple browser tab handling",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-24",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.24: Educational Feedback System",
    "description": "Verify educational feedback system provides appropriate guidance and learning support",
    "scenario": "System provides contextual hints, explanations, and learning feedback during simulation",
    "expected_results": "Educational content helps users understand cybersecurity concepts and improve defensive skills",
    "procedure": "1. Perform defensive actions and verify feedback messages\n2. Check hint system availability and relevance\n3. Verify educational explanations for attack types\n4. Confirm defensive strategy recommendations\n5. Check progress feedback and skill development tracking\n6. Verify contextual help for terminal commands\n7. Test adaptive feedback based on performance level",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-25",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.25: Browser Compatibility Testing",
    "description": "Verify Blue Team vs Red Team mode works correctly across different web browsers",
    "scenario": "Simulation functions properly in Chrome, Firefox, Safari, and Edge browsers",
    "expected_results": "Consistent functionality and appearance across major web browsers",
    "procedure": "1. Test simulation in Google Chrome\n2. Verify functionality in Mozilla Firefox\n3. Check compatibility with Safari (if available)\n4. Test in Microsoft Edge browser\n5. Confirm JavaScript module loading works across browsers\n6. Verify CSS animations and transitions\n7. Check localStorage functionality across browsers",
    "test_status": "pending",
    "priority": "medium",
    "category": "functional"
  },
  {
    "test_plan_no": "STP-039-26",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.26: Accessibility Compliance",
    "description": "Verify Blue Team vs Red Team interface meets accessibility standards for screen readers and keyboard navigation",
    "scenario": "Simulation interface is accessible to users with disabilities through proper accessibility features",
    "expected_results": "Interface supports keyboard navigation, screen readers, and accessibility standards",
    "procedure": "1. Navigate interface using only keyboard\n2. Test with screen reader for proper content reading\n3. Verify focus indicators on interactive elements\n4. Check proper ARIA labels for complex components\n5. Test modal accessibility and focus management\n6. Verify color contrast meets accessibility standards\n7. Check alternative text for visual elements",
    "test_status": "pending",
    "priority": "medium",
    "category": "ui"
  },
  {
    "test_plan_no": "STP-039-27",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.27: Security Implementation",
    "description": "Verify security measures protect against client-side vulnerabilities and data exposure",
    "scenario": "Simulation implements proper security controls to protect user data and prevent exploitation",
    "expected_results": "Security controls prevent XSS, CSRF, and unauthorized data access",
    "procedure": "1. Test input validation in terminal commands\n2. Verify XSS protection in alert messages\n3. Check CSRF protection on API endpoints\n4. Test authorization for game state access\n5. Verify secure session management\n6. Check for data exposure in browser tools\n7. Test API rate limiting and abuse prevention",
    "test_status": "pending",
    "priority": "high",
    "category": "security"
  },
  {
    "test_plan_no": "STP-039-28",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.28: Mobile Responsiveness",
    "description": "Verify Blue Team vs Red Team interface adapts properly to mobile devices and smaller screens",
    "scenario": "Interface remains functional and usable on tablets and mobile devices with responsive design",
    "expected_results": "Interface adapts to smaller screens maintaining usability and core functionality",
    "procedure": "1. Test interface on tablet screen sizes (768px-1024px)\n2. Check mobile phone compatibility (320px-768px)\n3. Verify touch interaction compatibility\n4. Check text readability at different scales\n5. Verify button and interactive element sizing\n6. Test navigation and menu accessibility on mobile\n7. Check terminal usability on touch devices",
    "test_status": "pending",
    "priority": "medium",
    "category": "ui"
  },
  {
    "test_plan_no": "STP-039-29",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.29: Integration with Main CyberQuest System",
    "description": "Verify Blue Team vs Red Team mode integrates properly with main CyberQuest platform",
    "scenario": "Mode integrates seamlessly with user authentication, progress tracking, and navigation system",
    "expected_results": "Proper integration with authentication, navbar, user progress, and platform navigation",
    "procedure": "1. Verify authentication requirements for mode access\n2. Check user session management integration\n3. Test navigation integration with main platform\n4. Verify progress tracking and analytics integration\n5. Check logout functionality and session cleanup\n6. Test breadcrumb navigation and back buttons\n7. Verify consistent styling with platform theme",
    "test_status": "pending",
    "priority": "high",
    "category": "integration"
  },
  {
    "test_plan_no": "STP-039-30",
    "module_name": "Blue-Team-vs-Red-Team-Mode",
    "screen_design_ref": "Figure 39.30: Complete Blue vs Red Team Workflow",
    "description": "Verify complete end-to-end workflow from introduction through simulation completion with comprehensive cybersecurity training",
    "scenario": "User experiences complete Blue Team vs Red Team training from introduction to advanced simulation mastery",
    "expected_results": "Complete workflow provides engaging cybersecurity education covering defensive strategies, incident response, and real-time threat analysis",
    "procedure": "1. Access Blue Team vs Red Team introduction page\n2. Review team comparison and scenario overview\n3. Navigate through comprehensive tutorial covering defensive concepts\n4. Launch main simulation dashboard with all components\n5. Experience AI-driven attacks using Q-Learning adaptive system\n6. Use Defense Command Terminal for incident response\n7. Monitor Network Defense Map for asset status visualization\n8. Respond to real-time alerts in Alert Center\n9. Manage security controls (firewall, endpoint, access control)\n10. Utilize AI Threat Analysis for attack pattern recognition\n11. Execute incident response procedures for security events\n12. Practice terminal commands for defensive operations (status, scan, block, isolate)\n13. Experience adaptive learning difficulty adjustments based on performance\n14. Monitor 15-minute simulation timer and performance metrics\n15. Receive real-time feedback on defensive decisions\n16. Complete simulation with comprehensive scoring and performance analysis\n17. Review final results including asset integrity, detection rate, and response effectiveness\n18. Access performance recommendations for skill improvement\n19. Experience session persistence and state recovery capabilities\n20. Verify educational feedback enhances cybersecurity knowledge\n21. Complete multiple sessions to experience AI learning adaptation\n22. Verify comprehensive skill development in Blue Team defense, incident response, threat analysis, and real-time cybersecurity operations essential for SOC analyst and cybersecurity professional roles",
    "test_status": "pending",
    "priority": "critical",
    "category": "integration"
  }
]
